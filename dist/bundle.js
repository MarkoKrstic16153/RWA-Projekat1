!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function i(e){return"function"==typeof e}var s=!1,c={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){e&&(new Error).stack;s=e},get useDeprecatedSynchronousErrorHandling(){return s}};function u(e){setTimeout(function(){throw e})}var a={closed:!0,next:function(e){},error:function(e){if(c.useDeprecatedSynchronousErrorHandling)throw e;u(e)},complete:function(){}},l=Array.isArray||function(e){return e&&"number"==typeof e.length};function p(e){return null!==e&&"object"==typeof e}function d(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map(function(e,t){return t+1+") "+e.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}d.prototype=Object.create(Error.prototype);var h=d,f=function(){function e(e){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,e&&(this._unsubscribe=e)}var t;return e.prototype.unsubscribe=function(){var e,t=!1;if(!this.closed){var n=this._parent,r=this._parents,o=this._unsubscribe,s=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var c=-1,u=r?r.length:0;n;)n.remove(this),n=++c<u&&r[c]||null;if(i(o))try{o.call(this)}catch(n){t=!0,e=n instanceof h?b(n.errors):[n]}if(l(s))for(c=-1,u=s.length;++c<u;){var a=s[c];if(p(a))try{a.unsubscribe()}catch(n){t=!0,e=e||[],n instanceof h?e=e.concat(b(n.errors)):e.push(n)}}if(t)throw new h(e)}},e.prototype.add=function(t){var n=t;switch(typeof t){case"function":n=new e(t);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof e)){var r=n;(n=new e)._subscriptions=[r]}break;default:if(!t)return e.EMPTY;throw new Error("unrecognized teardown "+t+" added to Subscription.")}if(n._addParent(this)){var o=this._subscriptions;o?o.push(n):this._subscriptions=[n]}return n},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}},e.prototype._addParent=function(e){var t=this._parent,n=this._parents;return t!==e&&(t?n?-1===n.indexOf(e)&&(n.push(e),!0):(this._parents=[e],!0):(this._parent=e,!0))},e.EMPTY=((t=new e).closed=!0,t),e}();function b(e){return e.reduce(function(e,t){return e.concat(t instanceof h?t.errors:t)},[])}var m="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),y=function(e){function t(n,r,o){var i=e.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=a;break;case 1:if(!n){i.destination=a;break}if("object"==typeof n){n instanceof t?(i.syncErrorThrowable=n.syncErrorThrowable,i.destination=n,n.add(i)):(i.syncErrorThrowable=!0,i.destination=new v(i,n));break}default:i.syncErrorThrowable=!0,i.destination=new v(i,n,r,o)}return i}return o(t,e),t.prototype[m]=function(){return this},t.create=function(e,n,r){var o=new t(e,n,r);return o.syncErrorThrowable=!1,o},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parent,t=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=e,this._parents=t,this},t}(f),v=function(e){function t(t,n,r,o){var s,c=e.call(this)||this;c._parentSubscriber=t;var u=c;return i(n)?s=n:n&&(s=n.next,r=n.error,o=n.complete,n!==a&&(i((u=Object.create(n)).unsubscribe)&&c.add(u.unsubscribe.bind(u)),u.unsubscribe=c.unsubscribe.bind(c))),c._context=u,c._next=s,c._error=r,c._complete=o,c}return o(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;c.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,n=c.useDeprecatedSynchronousErrorHandling;if(this._error)n&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)n?(t.syncErrorValue=e,t.syncErrorThrown=!0):u(e),this.unsubscribe();else{if(this.unsubscribe(),n)throw e;u(e)}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var n=function(){return e._complete.call(e._context)};c.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),c.useDeprecatedSynchronousErrorHandling)throw e;u(e)}},t.prototype.__tryOrSetError=function(e,t,n){if(!c.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,n)}catch(t){return c.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0,!0):(u(t),!0)}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(y);var E="function"==typeof Symbol&&Symbol.observable||"@@observable";function g(){}function w(e){return e?1===e.length?e[0]:function(t){return e.reduce(function(e,t){return t(e)},t)}:g}var S=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r=this.operator,o=function(e,t,n){if(e){if(e instanceof y)return e;if(e[m])return e[m]()}return e||t||n?new y(e,t,n):new y(a)}(e,t,n);if(r?o.add(r.call(o,this.source)):o.add(this.source||c.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),c.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){c.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),!function(e){for(;e;){var t=e,n=t.closed,r=t.destination,o=t.isStopped;if(n||o)return!1;e=r&&r instanceof y?r:null}return!0}(e)?console.warn(t):e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=_(t))(function(t,r){var o;o=n.subscribe(function(t){try{e(t)}catch(e){r(e),o&&o.unsubscribe()}},r,t)})},e.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},e.prototype[E]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:w(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=_(e))(function(e,n){var r;t.subscribe(function(e){return r=e},function(e){return n(e)},function(){return e(r)})})},e.create=function(t){return new e(t)},e}();function _(e){if(e||(e=c.Promise||Promise),!e)throw new Error("no Promise impl found");return e}function j(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}j.prototype=Object.create(Error.prototype);var x=j,T=function(e){function t(t,n){var r=e.call(this)||this;return r.subject=t,r.subscriber=n,r.closed=!1,r}return o(t,e),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var n=t.indexOf(this.subscriber);-1!==n&&t.splice(n,1)}}},t}(f),C=function(e){function t(t){var n=e.call(this,t)||this;return n.destination=t,n}return o(t,e),t}(y),H=function(e){function t(){var t=e.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,e),t.prototype[m]=function(){return new C(this)},t.prototype.lift=function(e){var t=new L(this,this);return t.operator=e,t},t.prototype.next=function(e){if(this.closed)throw new x;if(!this.isStopped)for(var t=this.observers,n=t.length,r=t.slice(),o=0;o<n;o++)r[o].next(e)},t.prototype.error=function(e){if(this.closed)throw new x;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,n=t.length,r=t.slice(),o=0;o<n;o++)r[o].error(e);this.observers.length=0},t.prototype.complete=function(){if(this.closed)throw new x;this.isStopped=!0;for(var e=this.observers,t=e.length,n=e.slice(),r=0;r<t;r++)n[r].complete();this.observers.length=0},t.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},t.prototype._trySubscribe=function(t){if(this.closed)throw new x;return e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){if(this.closed)throw new x;return this.hasError?(e.error(this.thrownError),f.EMPTY):this.isStopped?(e.complete(),f.EMPTY):(this.observers.push(e),new T(this,e))},t.prototype.asObservable=function(){var e=new S;return e.source=this,e},t.create=function(e,t){return new L(e,t)},t}(S),L=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return o(t,e),t.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e)},t.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e)},t.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},t.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):f.EMPTY},t}(H);function M(e){return!!e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}var N=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function k(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var O=k();var P=function(e){return function(t){for(var n=0,r=e.length;n<r&&!t.closed;n++)t.next(e[n]);t.closed||t.complete()}};function I(e,t){return new S(t?function(n){var r=new f,o=0;return r.add(t.schedule(function(){o!==e.length?(n.next(e[o++]),n.closed||r.add(this.schedule())):n.complete()})),r}:P(e))}var q=function(e){return function(t){return e.then(function(e){t.closed||(t.next(e),t.complete())},function(e){return t.error(e)}).then(null,u),t}};var U=function(e){return function(t){for(var n=e[O]();;){var r=n.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add(function(){n.return&&n.return()}),t}};var A=function(e){return function(t){var n=e[E]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)}};var V=function(e){if(e instanceof S)return function(t){return e._isScalar?(t.next(e.value),void t.complete()):e.subscribe(t)};if(e&&"function"==typeof e[E])return A(e);if(N(e))return P(e);if(M(e))return q(e);if(e&&"function"==typeof e[O])return U(e);var t=p(e)?"an invalid object":"'"+e+"'";throw new TypeError("You provided "+t+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function D(e,t){if(!t)return e instanceof S?e:new S(V(e));if(null!=e){if(function(e){return e&&"function"==typeof e[E]}(e))return function(e,t){return new S(t?function(n){var r=new f;return r.add(t.schedule(function(){var o=e[E]();r.add(o.subscribe({next:function(e){r.add(t.schedule(function(){return n.next(e)}))},error:function(e){r.add(t.schedule(function(){return n.error(e)}))},complete:function(){r.add(t.schedule(function(){return n.complete()}))}}))})),r}:A(e))}(e,t);if(M(e))return function(e,t){return new S(t?function(n){var r=new f;return r.add(t.schedule(function(){return e.then(function(e){r.add(t.schedule(function(){n.next(e),r.add(t.schedule(function(){return n.complete()}))}))},function(e){r.add(t.schedule(function(){return n.error(e)}))})})),r}:q(e))}(e,t);if(N(e))return I(e,t);if(function(e){return e&&"function"==typeof e[O]}(e)||"string"==typeof e)return function(e,t){if(!e)throw new Error("Iterable cannot be null");return new S(t?function(n){var r,o=new f;return o.add(function(){r&&"function"==typeof r.return&&r.return()}),o.add(t.schedule(function(){r=e[O](),o.add(t.schedule(function(){if(!n.closed){var e,t;try{var o=r.next();e=o.value,t=o.done}catch(e){return void n.error(e)}t?n.complete():(n.next(e),this.schedule())}}))})),o}:U(e))}(e,t)}throw new TypeError((null!==e&&typeof e||e)+" is not observable")}function z(e,t){return function(n){if("function"!=typeof e)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new R(e,t))}}var R=function(){function e(e,t){this.project=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new K(e,this.project,this.thisArg))},e}(),K=function(e){function t(t,n,r){var o=e.call(this,t)||this;return o.project=n,o.count=0,o.thisArg=r||o,o}return o(t,e),t.prototype._next=function(e){var t;try{t=this.project.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(y);Object.prototype.toString;function Y(e,t,n,r){return i(n)&&(r=n,n=void 0),r?Y(e,t,n).pipe(z(function(e){return l(e)?r.apply(void 0,e):r(e)})):new S(function(r){!function e(t,n,r,o,i){var s;if(function(e){return e&&"function"==typeof e.addEventListener&&"function"==typeof e.removeEventListener}(t)){var c=t;t.addEventListener(n,r,i),s=function(){return c.removeEventListener(n,r,i)}}else if(function(e){return e&&"function"==typeof e.on&&"function"==typeof e.off}(t)){var u=t;t.on(n,r),s=function(){return u.off(n,r)}}else if(function(e){return e&&"function"==typeof e.addListener&&"function"==typeof e.removeListener}(t)){var a=t;t.addListener(n,r),s=function(){return a.removeListener(n,r)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var l=0,p=t.length;l<p;l++)e(t[l],n,r,o,i)}o.add(s)}(e,t,function(e){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(e)},r,n)})}var J=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return o(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return t;clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n=!1,r=void 0;try{this.work(e)}catch(e){n=!0,r=!!e&&e||new Error(e)}if(n)return this.unsubscribe(),r},t.prototype._unsubscribe=function(){var e=this.id,t=this.scheduler,n=t.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null},t}(function(e){function t(t,n){return e.call(this)||this}return o(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(f)),G=function(){function e(t,n){void 0===n&&(n=e.now),this.SchedulerAction=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.SchedulerAction(this,e).schedule(n,t)},e.now=function(){return Date.now()},e}(),B=new(function(e){function t(n,r){void 0===r&&(r=G.now);var o=e.call(this,n,function(){return t.delegate&&t.delegate!==o?t.delegate.now():r()})||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return o(t,e),t.prototype.schedule=function(n,r,o){return void 0===r&&(r=0),t.delegate&&t.delegate!==this?t.delegate.schedule(n,r,o):e.prototype.schedule.call(this,n,r,o)},t.prototype.flush=function(e){var t=this.actions;if(this.active)t.push(e);else{var n;this.active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(G))(J);function F(e,t){var n;return void 0===e&&(e=0),void 0===t&&(t=B),(l(n=e)||!(n-parseFloat(n)+1>=0)||e<0)&&(e=0),t&&"function"==typeof t.schedule||(t=B),new S(function(n){return n.add(t.schedule(Q,e,{subscriber:n,counter:0,period:e})),n})}function Q(e){var t=e.subscriber,n=e.counter,r=e.period;t.next(n),this.schedule({subscriber:t,counter:n+1,period:r},r)}var W=new S(function(e){return e.complete()});var X=function(e){function t(t,n,r){var o=e.call(this)||this;return o.parent=t,o.outerValue=n,o.outerIndex=r,o.index=0,o}return o(t,e),t.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this)},t.prototype._error=function(e){this.parent.notifyError(e,this),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},t}(y);function Z(e,t,n,r,o){if(void 0===o&&(o=new X(e,n,r)),!o.closed)return V(t)(o)}var $=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.notifyNext=function(e,t,n,r,o){this.destination.next(t)},t.prototype.notifyError=function(e,t){this.destination.error(e)},t.prototype.notifyComplete=function(e){this.destination.complete()},t}(y);function ee(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&l(t[0])&&(t=t[0]),0===t.length?W:e?ee(t).pipe(z(function(t){return e.apply(void 0,t)})):new S(function(e){return new te(e,t)})}var te=function(e){function t(t,n){var r=e.call(this,t)||this;r.sources=n,r.completed=0,r.haveValues=0;var o=n.length;r.values=new Array(o);for(var i=0;i<o;i++){var s=Z(r,n[i],null,i);s&&r.add(s)}return r}return o(t,e),t.prototype.notifyNext=function(e,t,n,r,o){this.values[n]=t,o._hasValue||(o._hasValue=!0,this.haveValues++)},t.prototype.notifyComplete=function(e){var t=this.destination,n=this.haveValues,r=this.values,o=r.length;e._hasValue?(this.completed++,this.completed===o&&(n===o&&t.next(r),t.complete())):t.complete()},t}($);var ne=function(){function e(e){this.resultSelector=e}return e.prototype.call=function(e,t){return t.subscribe(new re(e,this.resultSelector))},e}(),re=function(e){function t(t,n,r){void 0===r&&(r=Object.create(null));var o=e.call(this,t)||this;return o.iterators=[],o.active=0,o.resultSelector="function"==typeof n?n:null,o.values=r,o}return o(t,e),t.prototype._next=function(e){var t=this.iterators;l(e)?t.push(new ie(e)):"function"==typeof e[O]?t.push(new oe(e[O]())):t.push(new se(this.destination,this,e))},t.prototype._complete=function(){var e=this.iterators,t=e.length;if(this.unsubscribe(),0!==t){this.active=t;for(var n=0;n<t;n++){var r=e[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},t.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},t.prototype.checkIterators=function(){for(var e=this.iterators,t=e.length,n=this.destination,r=0;r<t;r++){if("function"==typeof(s=e[r]).hasValue&&!s.hasValue())return}var o=!1,i=[];for(r=0;r<t;r++){var s,c=(s=e[r]).next();if(s.hasCompleted()&&(o=!0),c.done)return void n.complete();i.push(c.value)}this.resultSelector?this._tryresultSelector(i):n.next(i),o&&n.complete()},t.prototype._tryresultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(y),oe=function(){function e(e){this.iterator=e,this.nextResult=e.next()}return e.prototype.hasValue=function(){return!0},e.prototype.next=function(){var e=this.nextResult;return this.nextResult=this.iterator.next(),e},e.prototype.hasCompleted=function(){var e=this.nextResult;return e&&e.done},e}(),ie=function(){function e(e){this.array=e,this.index=0,this.length=0,this.length=e.length}return e.prototype[O]=function(){return this},e.prototype.next=function(e){var t=this.index++,n=this.array;return t<this.length?{value:n[t],done:!1}:{value:null,done:!0}},e.prototype.hasValue=function(){return this.array.length>this.index},e.prototype.hasCompleted=function(){return this.array.length===this.index},e}(),se=function(e){function t(t,n,r){var o=e.call(this,t)||this;return o.parent=n,o.observable=r,o.stillUnsubscribed=!0,o.buffer=[],o.isComplete=!1,o}return o(t,e),t.prototype[O]=function(){return this},t.prototype.next=function(){var e=this.buffer;return 0===e.length&&this.isComplete?{value:null,done:!0}:{value:e.shift(),done:!1}},t.prototype.hasValue=function(){return this.buffer.length>0},t.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},t.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},t.prototype.notifyNext=function(e,t,n,r,o){this.buffer.push(t),this.parent.checkIterators()},t.prototype.subscribe=function(e,t){return Z(this,this.observable,this,t)},t}($);function ce(e,t){return void 0===t&&(t=B),function(n){return n.lift(new ue(e,t))}}var ue=function(){function e(e,t){this.dueTime=e,this.scheduler=t}return e.prototype.call=function(e,t){return t.subscribe(new ae(e,this.dueTime,this.scheduler))},e}(),ae=function(e){function t(t,n,r){var o=e.call(this,t)||this;return o.dueTime=n,o.scheduler=r,o.debouncedSubscription=null,o.lastValue=null,o.hasValue=!1,o}return o(t,e),t.prototype._next=function(e){this.clearDebounce(),this.lastValue=e,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(le,this.dueTime,this))},t.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},t.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var e=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(e)}},t.prototype.clearDebounce=function(){var e=this.debouncedSubscription;null!==e&&(this.remove(e),e.unsubscribe(),this.debouncedSubscription=null)},t}(y);function le(e){e.debouncedNext()}function pe(e,t){return function(n){return n.lift(new de(e,t))}}var de=function(){function e(e,t){this.predicate=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new he(e,this.predicate,this.thisArg))},e}(),he=function(e){function t(t,n,r){var o=e.call(this,t)||this;return o.predicate=n,o.thisArg=r,o.count=0,o}return o(t,e),t.prototype._next=function(e){var t;try{t=this.predicate.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}t&&this.destination.next(e)},t}(y);function fe(e,t){return function(n){return n.lift(new be(e,t))}}var be=function(){function e(e,t){this.keySelector=e,this.flushes=t}return e.prototype.call=function(e,t){return t.subscribe(new me(e,this.keySelector,this.flushes))},e}(),me=function(e){function t(t,n,r){var o=e.call(this,t)||this;return o.keySelector=n,o.values=new Set,r&&o.add(Z(o,r)),o}return o(t,e),t.prototype.notifyNext=function(e,t,n,r,o){this.values.clear()},t.prototype.notifyError=function(e,t){this._error(e)},t.prototype._next=function(e){this.keySelector?this._useKeySelector(e):this._finalizeNext(e,e)},t.prototype._useKeySelector=function(e){var t,n=this.destination;try{t=this.keySelector(e)}catch(e){return void n.error(e)}this._finalizeNext(t,e)},t.prototype._finalizeNext=function(e,t){var n=this.values;n.has(e)||(n.add(e),this.destination.next(t))},t}($);var ye=function(){function e(){}return e.prototype.call=function(e,t){return t.subscribe(new ve(e))},e}(),ve=function(e){function t(t){var n=e.call(this,t)||this;return n.hasPrev=!1,n}return o(t,e),t.prototype._next=function(e){this.hasPrev?this.destination.next([this.prev,e]):this.hasPrev=!0,this.prev=e},t}(y);function Ee(e){return function(t){return t.lift(new ge(e))}}var ge=function(){function e(e){this.notifier=e}return e.prototype.call=function(e,t){var n=new we(e),r=Z(n,this.notifier);return r&&!n.seenValue?(n.add(r),t.subscribe(n)):n},e}(),we=function(e){function t(t){var n=e.call(this,t)||this;return n.seenValue=!1,n}return o(t,e),t.prototype.notifyNext=function(e,t,n,r,o){this.seenValue=!0,this.complete()},t.prototype.notifyComplete=function(){},t}($);var Se=function(){function e(e){this.project=e}return e.prototype.call=function(e,t){return t.subscribe(new _e(e,this.project))},e}(),_e=function(e){function t(t,n){var r=e.call(this,t)||this;return r.project=n,r.index=0,r}return o(t,e),t.prototype._next=function(e){var t,n=this.index++;try{t=this.project(e,n)}catch(e){return void this.destination.error(e)}this._innerSub(t,e,n)},t.prototype._innerSub=function(e,t,n){var r=this.innerSubscription;r&&r.unsubscribe();var o=new X(this,void 0,void 0);this.destination.add(o),this.innerSubscription=Z(this,e,t,n,o)},t.prototype._complete=function(){var t=this.innerSubscription;t&&!t.closed||e.prototype._complete.call(this),this.unsubscribe()},t.prototype._unsubscribe=function(){this.innerSubscription=null},t.prototype.notifyComplete=function(t){this.destination.remove(t),this.innerSubscription=null,this.isStopped&&e.prototype._complete.call(this)},t.prototype.notifyNext=function(e,t,n,r,o){this.destination.next(t)},t}($);class je{constructor(e,t,n,r,o){this.odgovori=[],this.text=e,this.autor=t,this.katedra=n,this.predmet=r,this.id=o}dodajOdgovor(e){this.odgovori.push(e)}}class xe{constructor(e,t,n){this.autorr=e,this.sadrzaj=t,this.poeni=n}}class Te{constructor(e,t,n){this.username=e,this.password=t,this.lajkovaniOdg=n}dodajLajkovaniOdg(e){this.lajkovaniOdg.push(e)}}const Ce="http://localhost:3000";let He,Le,Me,Ne="",ke="",Oe=[],Pe=!0,Ie=!0,qe=!0,Ue=new H;function Ae(){const e=document.createElement("h2");if(e.innerHTML="ePitalica?",document.body.appendChild(e),""!=Ne){const e=document.createElement("div"),t=document.createElement("button");t.innerHTML="Log out",t.className="OGLOC",t.style.display="inline";const n=document.createElement("button");n.innerHTML="Moja Pitanja",n.className="OGLOC";const r=document.createElement("button");r.innerHTML="Clear",r.className="OGLOC",r.onclick=(()=>{Oe=[],Je(document.querySelector(".pitanja"))}),document.body.appendChild(e),e.appendChild(t),e.appendChild(n),e.appendChild(r),t.onclick=(e=>{const t={method:"put",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(Ne)};D(fetch(Ce+"/users/"+ke,t).then(e=>e.json())).subscribe(e=>{console.log(e)}),document.body.innerHTML="",Ne="",Ae(),Ve(),De()}),n.onclick=(e=>{Oe=[],document.querySelector(".pitanja").innerHTML="",D(fetch(Ce+"/pitanja?autor="+Ne.username).then(e=>e.json())).subscribe(e=>{Ye(e,document.querySelector(".pitanja"))})})}}function Ve(){const e=document.createElement("div");e.className="init";const t=document.createElement("p");t.innerHTML="Dobrodosli nazad, Ulogujte se ...";const n=document.createElement("input");n.name="user";const r=document.createElement("input");r.name="pass",r.type="password";const o=document.createElement("div");o.appendChild(t);let i=document.createElement("label");i.innerHTML="Username";let s=document.createElement("label");s.innerHTML="Password";let c=document.createElement("div"),u=document.createElement("div");c.appendChild(i),c.appendChild(n),u.appendChild(s),u.appendChild(r),o.appendChild(c),o.appendChild(u),e.appendChild(o),document.body.appendChild(e);const a=document.createElement("article");o.appendChild(a);const l=document.createElement("button");l.innerHTML="Login",o.appendChild(l),l.onclick=(e=>{!function(){let e=document.querySelector("input[name='user']").value,t=document.querySelector("input[name='pass']").value;console.log(t+" "+e),e&&t?D(fetch(Ce+"/users?username="+e+"&password="+t).then(e=>e.json())).subscribe(e=>{!function(e){let t=document.querySelector("article");0==e.length?t.innerHTML="Pogersan Username/Password!":(t.innerHTML="Uspesan Login, Sacekajte....",Ne=new Te(e[0].username,e[0].password,e[0].lajkovaniOdg),ke=e[0].id,console.log("USername je :"+Ne.username),Re())}(e),console.log(e)}):(document.querySelector("article").innerHTML="Nevalidan Unos!",console.log("Nevalidan Unos!"))}()})}function De(){let e=document.querySelector(".init");const t=document.createElement("p");t.innerHTML="Nemate Nalog, napravite ga ";const n=document.createElement("input");n.name="user1";const r=document.createElement("input");r.name="pass1",r.type="password";const o=document.createElement("div");o.appendChild(t);let i=document.createElement("label");i.innerHTML="Username";let s=document.createElement("label");s.innerHTML="Password";let c=document.createElement("div"),u=document.createElement("div");c.appendChild(i),c.appendChild(n),u.appendChild(s),u.appendChild(r),o.appendChild(c),o.appendChild(u),e.appendChild(o);const a=document.createElement("article");var l,p;o.appendChild(a),l=n,p=a,Y(r,"input").pipe(ce(500),z(e=>e.target.value.trim())).subscribe(e=>{ze(e,p," password!")}),Y(l,"input").pipe(ce(500),z(e=>e.target.value.trim())).subscribe(e=>{ze(e,p," username!")});const d=document.createElement("button");d.innerHTML="Sign Up",o.appendChild(d),d.onclick=(e=>{!function(){let e=document.querySelector("input[name='user1']").value,t=document.querySelector("input[name='pass1']").value;console.log(t+" "+e),e.trim().length>=4&&t.trim().length>=4?D(fetch(Ce+"/users?username="+e+"&password="+t).then(e=>e.json())).subscribe(e=>{!function(e){let t=document.querySelectorAll("article")[1];if(0==e.length){let e=document.querySelector("input[name='user1']").value,n=document.querySelector("input[name='pass1']").value,r=[],o=new Te(e,n,r);Ne=o;const i={method:"post",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(o)};D(fetch(Ce+"/users",i).then(e=>e.json())).subscribe(e=>{t.innerHTML="Uspesno stvoren novi account!",D(fetch(Ce+"/users?username="+Ne.username).then(e=>e.json())).subscribe(e=>{ke=e[0].id,console.log("UVACEN ID JE "+ke)}),Re()})}else t.innerHTML="Username/Password kombinacija je zauzeta!"}(e),console.log(e)}):(document.querySelectorAll("article")[1].innerHTML="Nevalidan Unos!",console.log("Nevalidan Unos!"))}()})}function ze(e,t,n){e.length<4?t.innerHTML="Nedovoljno dug"+n:t.innerHTML=""}function Re(){var e;new Promise((t,n)=>{setTimeout(()=>t(e),1500)}).then(e=>(function(e){document.body.innerHTML="",Ae(),function(){const e=document.createElement("p");e.innerHTML="* Dobrodosli "+Ne.username+" *!",e.className="str",document.body.appendChild(e);const t=document.createElement("div");t.className="main";const n=document.createElement("div");n.className="pitanja";const r=document.createElement("div");r.className="forma",t.appendChild(n),t.appendChild(r),document.body.appendChild(t),function(e){let t=document.createElement("div");e.appendChild(t);let n=document.createElement("label");n.innerHTML="Pretrazite pitanja po nazivu predmeta : ",t.appendChild(n);const r=document.createElement("input");r.name="search",t.appendChild(r);const o=document.createElement("button");o.innerHTML="Pretrazi",o.className="src",t.appendChild(o),o.onclick=(e=>{Oe=[],Ke(r.value.trim())});let i=document.createElement("div");e.appendChild(i);let s=document.createElement("label");s.innerHTML="Pretrazite pitanja po kljucnim recima : ",i.appendChild(s);const c=document.createElement("input");c.name="search2",c.style.display="inline",i.appendChild(c),u=c,Y(u,"input").pipe(ce(500),z(e=>e.target.value.trim()),pe(e=>e.length>=4)).subscribe(e=>{Oe=[],function(e){const t=document.querySelector(".pitanja");let n=document.querySelector("input[name='search']").value.trim();""==n?(t.innerHTML="",fetch(Ce+"/pitanja?q="+e).then(e=>e.json()).then(e=>Ye(e,t))):(t.innerHTML="",fetch(Ce+"/pitanja?predmet="+n+"&q="+e).then(e=>e.json()).then(e=>Ye(e,t)))}(e)}),function(e){const t=document.createElement("div"),n=document.createElement("div"),r=document.createElement("button");r.innerHTML="Nova Pitanja",r.className="subbutton",r.style.display="inline",r.onclick=(e=>{Be(1)});const o=document.createElement("button");o.innerHTML="SubAll",o.className="subbutton",o.style.display="inline",o.onclick=(e=>{Be(2)});const i=document.createElement("button");i.innerHTML="Ispocetka",i.className="subbutton",i.style.display="inline",Ge(i),i.onclick=(e=>{Oe=[]});const s=document.createElement("button");s.innerHTML="U paru",s.className="subbutton",s.style.display="inline",s.onclick=(e=>{let t=S.create(e=>{setInterval(()=>e.next(parseInt(17*Math.random()+1)),1e3)}),n=t.pipe(fe(),function(e){return e.lift(new ye)},Ee(Ue));n.subscribe(e=>{console.log(e),function(e){const t=D(fetch(Ce+"/pitanja/"+e[0]).then(e=>e.json()));t.subscribe(e=>console.log(e));const n=D(fetch(Ce+"/pitanja/"+e[1]).then(e=>e.json()));n.subscribe(e=>console.log(e)),ee([t,n]).subscribe({next:e=>{Oe=e,Je(document.querySelector(".stream"))},complete:()=>console.log("Kraj!")})}(e)})}),n.appendChild(r),n.appendChild(o),n.appendChild(i),n.appendChild(s),["RII","EEN","UPS"].forEach(e=>{let n=document.createElement("button");n.innerHTML="Sub "+e,n.style.display="inline",t.appendChild(n),n.id=e,n.className="subbutton",n.onclick=(e=>{!function(e){"RII"==e.id?(1==Pe?(D(fetch(Ce+"/pitanja?katedra=RII").then(e=>e.json())).subscribe(e=>{Xe(e,e.length,"RII")}),e.innerHTML="Unsub RII"):(He.unsubscribe(),He=null,e.innerHTML="Sub RII"),Pe=!Pe):"EEN"==e.id?(1==Ie?(e.innerHTML="Unsub EEN",D(fetch(Ce+"/pitanja?katedra=EEN").then(e=>e.json())).subscribe(e=>{Xe(e,e.length,"EEN")})):(Le.unsubscribe(),Le=null,e.innerHTML="Sub EEN"),Ie=!Ie):(1==qe?(D(fetch(Ce+"/pitanja?katedra=UPS").then(e=>e.json())).subscribe(e=>{Xe(e,e.length,"UPS")}),e.innerHTML="Unsub UPS"):(Me.unsubscribe(),Me=null,e.innerHTML="Sub UPS"),qe=!qe)}(e.target)})});const c=document.createElement("button");c.innerHTML="Unsub All",c.style.display="inline",c.onclick=(e=>{let t;for(Ue.next(2),Pe=!0,Ie=!0,qe=!0,t=0;t<3;t++){let e=document.querySelectorAll(".subbutton")[t];e.innerHTML="Sub "+e.id}Ge(i)}),t.appendChild(c),e.appendChild(t),e.appendChild(n);const u=document.createElement("hr");e.appendChild(u)}(e),function(e){const t=document.createElement("p");t.innerHTML="Unesite sadrzaj Vaseg pitanja ovde:",e.appendChild(t);const n=document.createElement("textarea");n.name="sadrzaj",n.rows=6,n.cols=25,e.appendChild(n)}(e),function(e){const t=document.createElement("div");let n=document.createElement("label");n.innerHTML="Selektujte Katedru za pitanje :",t.appendChild(n);const r=document.createElement("select");["RII","EEN","UPS"].forEach(e=>{let t=document.createElement("option");t.innerHTML=e,t.value=e,r.appendChild(t)}),t.appendChild(r),e.appendChild(t);const o=document.createElement("div");e.appendChild(o);const i=document.createElement("label");i.innerHTML="Unesite naziv Predmeta :";const s=document.createElement("input");s.name="imePredmeta",o.appendChild(i),o.appendChild(s),e.appendChild(o);const c=document.createElement("button");c.innerHTML="Dodaj",c.style.marginLeft="75%",e.appendChild(c),c.onclick=(t=>{!function(e){let t=e.querySelector("select").value,n=e.querySelector("textarea").value,r=e.querySelector("input[name='imePredmeta']").value;if(!n||!r)return;console.log(t+" "+n+" "+r);let o=new je(n,Ne.username,t,r);const i={autor:Ne.username,predmet:r,katedra:t,text:n,odgovori:[]},s={method:"post",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(i)};D(fetch(Ce+"/pitanja",s).then(e=>e.json())).subscribe(e=>{console.log(e),Oe=[],Ke(o.predmet)})}(e)})}(e),function(e){const t=document.createElement("hr");e.appendChild(t);let n=document.createElement("div");n.className="kontej";let r=document.createElement("p");r.innerHTML="*** Stream ***",r.className="str";const o=document.createElement("button");o.innerHTML="Ocisti",o.className="clrr",o.style.display="inline",o.onclick=(e=>{Oe=[];let t=document.querySelector(".stream");t.innerHTML=""}),n.appendChild(r),n.appendChild(o),e.appendChild(n);const i=document.createElement("div");i.className="stream",e.appendChild(r),e.appendChild(i)}(e);var u}(r)}()})()).catch(e=>console.log(e))}function Ke(e){const t=document.querySelector(".pitanja");t.innerHTML="",fetch(Ce+"/pitanja?predmet="+e).then(e=>e.json()).then(e=>Ye(e,t))}function Ye(e,t){e.forEach(e=>{let t=new je(e.text,e.autor,e.katedra,e.predmet,e.id);e.odgovori.forEach(e=>{let n=new xe(e.autorr,e.sadrzaj,e.poeni);t.dodajOdgovor(n)}),Oe.push(t)}),console.log(Oe),Je(t)}function Je(e){let t;e.innerHTML="",Oe.forEach(n=>{t=!1;let r=document.createElement("div");r.className="question",e.appendChild(r);let o=document.createElement("label");o.className="autor",o.innerHTML="*Autor: "+n.autor+" *Katedra "+n.katedra+" *Predmet "+n.predmet+" *Broj Odgovora "+n.odgovori.length+"*";let i=document.createElement("label");i.innerHTML=n.text,i.className="questxt";let s,c=document.createElement("button");c.innerHTML="Odgovori",c.id=n.id,c.onclick=(e=>{!function(e){console.log(e),D(Oe).pipe(pe(t=>t.id==e)).subscribe(e=>Qe(e))}(e.target.id)}),n.autor==Ne.username&&(t=!0,(s=document.createElement("button")).innerHTML="Obrisi",s.style.display="inline",s.id=n.id,s.onclick=(e=>{console.log(e.target.id),Oe.forEach((t,n)=>{t.id==e.target.id&&Oe.splice(n,1)});const t={method:"delete",headers:new Headers({"Content-Type":"application/json"})};D(fetch(Ce+"/pitanja/"+e.target.id,t).then(e=>e.json())).subscribe(e=>{document.querySelector(".pitanja").innerHTML="",Je(document.querySelector(".pitanja"))})})),r.appendChild(o),r.appendChild(i),1==t&&r.appendChild(s),r.appendChild(c)})}function Ge(e){Y(e,"click").pipe(function e(t,n){return"function"==typeof n?function(r){return r.pipe(e(function(e,r){return D(t(e,r)).pipe(z(function(t,o){return n(e,t,r,o)}))}))}:function(e){return e.lift(new Se(t))}}(e=>F(2e3)),Ee(Ue)).subscribe(e=>{console.log(e),function(e){D(fetch(Ce+"/pitanja/"+e).then(e=>e.json())).subscribe(e=>{console.log(e),e.autor&&Oe.push(e),Je(document.querySelector(".stream"))})}(e+1)})}function Be(e){D(fetch(Ce+"/pitanja?katedra=RII").then(e=>e.json())).subscribe(t=>Fe(t,"RII",e)),D(fetch(Ce+"/pitanja?katedra=EEN").then(e=>e.json())).subscribe(t=>Fe(t,"EEN",e));D(fetch(Ce+"/pitanja?katedra=UPS").then(e=>e.json())).subscribe(t=>Fe(t,"UPS",e))}function Fe(e,t,n){"RII"==t?(He=D(e)).subscribe(e=>console.log(e)):"EEN"==t?(Le=D(e)).subscribe(e=>console.log(e)):((Me=D(e)).subscribe(e=>console.log(e)),1==n?ee([He,Le,Me]).subscribe({next:e=>{Oe=e,Je(document.querySelector(".stream"))},complete:()=>console.log("Kraj!")}):function(){let e=F(2500);e.subscribe(),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[e.length-1];return"function"==typeof n&&e.pop(),I(e,void 0).lift(new ne(n))}(He,Le,Me,e).pipe(z(([e,t,n,r])=>[e,t,n]),Ee(Ue)).subscribe(e=>{Oe=e,Je(document.querySelector(".stream"))})}())}function Qe(e){let t=!0;console.log(e);let n=document.querySelector(".pitanja");n.innerHTML="";let r=document.createElement("div");r.className="question",n.appendChild(r);let o=document.createElement("label");o.className="autor",o.innerHTML="*Autor: "+e.autor+" *Katedra "+e.katedra+" *Predmet "+e.predmet+" *Broj Odgovora "+e.odgovori.length+" *";let i=document.createElement("label");i.innerHTML=e.text,i.className="questxt",r.appendChild(o),r.appendChild(i);const s=document.createElement("div");s.className="LIFO",e.odgovori.forEach((n,o)=>{t=!0;let i=document.createElement("div");i.className="question";let c=document.createElement("label");c.innerHTML="*Odgovor : Autor "+n.autorr+" *Rejting "+n.poeni+"*",c.className="autor",i.appendChild(c);let u,a=document.createElement("label");a.className="questxt",a.innerHTML=n.sadrzaj,Ne.lajkovaniOdg.forEach(e=>{e==n.sadrzaj&&(t=!1)}),1==t&&((u=document.createElement("button")).innerHTML="Upvote",u.id=o,u.onclick=(t=>{e.odgovori[t.target.id].poeni++,Ne.lajkovaniOdg.push(e.odgovori[t.target.id].sadrzaj),We(e,1)})),i.appendChild(a),1==t&&u&&i.appendChild(u),s.appendChild(i),r.appendChild(s)});const c=document.createElement("p");c.innerHTML="Dodajte Vas Odgovor ...",n.appendChild(c);const u=document.createElement("textarea");u.rows=5,n.appendChild(u);const a=document.createElement("div"),l=document.createElement("button");l.innerHTML="Daj Odgovor",l.style.display="inline",l.onclick=(t=>{console.log(e),We(e)}),a.appendChild(l);const p=document.createElement("button");p.innerHTML="Nazad",a.appendChild(p),p.onclick=(e=>{Je(n)}),n.appendChild(a)}function We(e,t){console.log(e);let n=document.querySelector(".pitanja").querySelector("textarea").value;if(""!=n.trim()||t||retrun,!t){let t=new xe(Ne.username,n,0);e.odgovori.push(t)}const r={method:"put",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(e)};D(fetch(Ce+"/pitanja/"+e.id,r).then(e=>e.json())).subscribe(e=>{document.querySelector(".pitanja").innerHTML="",Qe(e)})}function Xe(e,t,n){let r=[];e.forEach(e=>{r.push(e)});let o=S.create(e=>{setInterval(()=>e.next(parseInt(Math.random()*t)),2e3)}).pipe(Ee(Ue),fe()).subscribe(t=>{Oe.push(e[t]),Je(document.querySelector(".stream"))});"RII"==n?He=o:"EEN"==n?Le=o:"UPS"==n&&(Me=o)}Ue.subscribe(e=>console.log(e)),Ae(),Ve(),De()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaG9zdFJlcG9ydEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL09ic2VydmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc3ltYm9sL3J4U3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3RvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2NhblJlcG9ydEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3ViamVjdFN1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TdWJqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUb09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2ludGVydmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNOdW1lcmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvSW5uZXJTdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvT3V0ZXJTdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZm9ya0pvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcGFpcndpc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VVbnRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9QaXRhbmplLmpzIiwid2VicGFjazovLy8uL3NyYy9PZGdvdm9yLmpzIiwid2VicGFjazovLy8uL3NyYy9Vc2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9nbGF2bmkuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJleHRlbmRTdGF0aWNzIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJfX2V4dGVuZHMiLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsImlzRnVuY3Rpb24iLCJ4IiwiX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzIiwiY29uZmlnIiwiUHJvbWlzZSIsInVuZGVmaW5lZCIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJFcnJvciIsInN0YWNrIiwiaG9zdFJlcG9ydEVycm9yIiwiZXJyIiwic2V0VGltZW91dCIsImVtcHR5IiwiY2xvc2VkIiwibmV4dCIsImVycm9yIiwiY29tcGxldGUiLCJpc0FycmF5IiwibGVuZ3RoIiwiaXNPYmplY3QiLCJVbnN1YnNjcmlwdGlvbkVycm9ySW1wbCIsImVycm9ycyIsIm1lc3NhZ2UiLCJtYXAiLCJ0b1N0cmluZyIsImpvaW4iLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiU3Vic2NyaXB0aW9uX1N1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsInVuc3Vic2NyaWJlIiwiX3BhcmVudCIsIl9wYXJlbnRzIiwiX3N1YnNjcmlwdGlvbnMiLCJfdW5zdWJzY3JpYmUiLCJoYXNFcnJvcnMiLCJpbmRleCIsImxlbiIsInJlbW92ZSIsImUiLCJmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMiLCJzdWIiLCJjb25jYXQiLCJwdXNoIiwiYWRkIiwidGVhcmRvd24iLCJzdWJzY3JpcHRpb24iLCJ0bXAiLCJFTVBUWSIsIl9hZGRQYXJlbnQiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uSW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwicGFyZW50IiwicmVkdWNlIiwiZXJycyIsInJ4U3Vic2NyaWJlciIsIk1hdGgiLCJyYW5kb20iLCJTdWJzY3JpYmVyX1N1YnNjcmliZXIiLCJfc3VwZXIiLCJTdWJzY3JpYmVyIiwiZGVzdGluYXRpb25Pck5leHQiLCJfdGhpcyIsInN5bmNFcnJvclZhbHVlIiwic3luY0Vycm9yVGhyb3duIiwic3luY0Vycm9yVGhyb3dhYmxlIiwiaXNTdG9wcGVkIiwiYXJndW1lbnRzIiwiZGVzdGluYXRpb24iLCJTdWJzY3JpYmVyX1NhZmVTdWJzY3JpYmVyIiwic3Vic2NyaWJlciIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSIsIlNhZmVTdWJzY3JpYmVyIiwiX3BhcmVudFN1YnNjcmliZXIiLCJvYnNlcnZlck9yTmV4dCIsImNvbnRleHQiLCJfY29udGV4dCIsIl9fdHJ5T3JTZXRFcnJvciIsIl9fdHJ5T3JVbnN1YiIsIndyYXBwZWRDb21wbGV0ZSIsImZuIiwib2JzZXJ2YWJsZV9vYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsIm5vb3AiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwiaW5wdXQiLCJwcmV2IiwiT2JzZXJ2YWJsZV9PYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9pc1NjYWxhciIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJzaW5rIiwibmV4dE9yT2JzZXJ2ZXIiLCJ0b1N1YnNjcmliZXIiLCJfdHJ5U3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJfYSIsImNsb3NlZF8xIiwiY2FuUmVwb3J0RXJyb3IiLCJjb25zb2xlIiwid2FybiIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJvcGVyYXRpb25zIiwiX2kiLCJ0b1Byb21pc2UiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsIlN1YmplY3RTdWJzY3JpcHRpb25fU3ViamVjdFN1YnNjcmlwdGlvbiIsIlN1YmplY3RTdWJzY3JpcHRpb24iLCJzdWJqZWN0Iiwib2JzZXJ2ZXJzIiwic3Vic2NyaWJlckluZGV4IiwiU3ViamVjdF9TdWJqZWN0U3Vic2NyaWJlciIsIlN1YmplY3RTdWJzY3JpYmVyIiwiU3ViamVjdF9TdWJqZWN0IiwiU3ViamVjdCIsImhhc0Vycm9yIiwidGhyb3duRXJyb3IiLCJTdWJqZWN0X0Fub255bW91c1N1YmplY3QiLCJjb3B5Iiwic2xpY2UiLCJhc09ic2VydmFibGUiLCJBbm9ueW1vdXNTdWJqZWN0IiwiaXNQcm9taXNlIiwidGhlbiIsImlzQXJyYXlMaWtlIiwiZ2V0U3ltYm9sSXRlcmF0b3IiLCJpdGVyYXRvciIsIml0ZXJhdG9yX2l0ZXJhdG9yIiwic3Vic2NyaWJlVG9BcnJheSIsImFycmF5IiwiZnJvbUFycmF5Iiwic2NoZWR1bGVyIiwic2NoZWR1bGUiLCJzdWJzY3JpYmVUb1Byb21pc2UiLCJwcm9taXNlIiwic3Vic2NyaWJlVG9JdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlbSIsImRvbmUiLCJyZXR1cm4iLCJzdWJzY3JpYmVUb09ic2VydmFibGUiLCJvYmoiLCJvYnMiLCJUeXBlRXJyb3IiLCJzdWJzY3JpYmVUbyIsInJlc3VsdCIsImZyb20iLCJpc0ludGVyb3BPYnNlcnZhYmxlIiwiZnJvbU9ic2VydmFibGUiLCJmcm9tUHJvbWlzZSIsImlzSXRlcmFibGUiLCJmcm9tSXRlcmFibGUiLCJwcm9qZWN0IiwidGhpc0FyZyIsIk1hcE9wZXJhdG9yIiwibWFwX01hcFN1YnNjcmliZXIiLCJNYXBTdWJzY3JpYmVyIiwiY291bnQiLCJmcm9tRXZlbnQiLCJ0YXJnZXQiLCJldmVudE5hbWUiLCJvcHRpb25zIiwicmVzdWx0U2VsZWN0b3IiLCJhcmdzIiwiYXBwbHkiLCJzZXR1cFN1YnNjcmlwdGlvbiIsInNvdXJjZU9iaiIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRXZlbnRUYXJnZXQiLCJzb3VyY2VfMSIsIm9uIiwib2ZmIiwiaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlciIsInNvdXJjZV8yIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyIiwic291cmNlXzMiLCJBc3luY0FjdGlvbl9Bc3luY0FjdGlvbiIsIkFzeW5jQWN0aW9uIiwid29yayIsInBlbmRpbmciLCJzdGF0ZSIsImRlbGF5IiwiaWQiLCJyZWN5Y2xlQXN5bmNJZCIsInJlcXVlc3RBc3luY0lkIiwic2V0SW50ZXJ2YWwiLCJmbHVzaCIsImNsZWFySW50ZXJ2YWwiLCJleGVjdXRlIiwiX2V4ZWN1dGUiLCJlcnJvcmVkIiwiZXJyb3JWYWx1ZSIsImFjdGlvbnMiLCJBY3Rpb24iLCJTY2hlZHVsZXIiLCJTY2hlZHVsZXJBY3Rpb24iLCJub3ciLCJEYXRlIiwiYXN5bmNfYXN5bmMiLCJBc3luY1NjaGVkdWxlciIsImRlbGVnYXRlIiwiYWN0aXZlIiwic2NoZWR1bGVkIiwiYWN0aW9uIiwic2hpZnQiLCJpbnRlcnZhbCIsInBlcmlvZCIsInZhbCIsInBhcnNlRmxvYXQiLCJkaXNwYXRjaCIsImNvdW50ZXIiLCJJbm5lclN1YnNjcmliZXJfSW5uZXJTdWJzY3JpYmVyIiwiSW5uZXJTdWJzY3JpYmVyIiwib3V0ZXJWYWx1ZSIsIm91dGVySW5kZXgiLCJub3RpZnlOZXh0Iiwibm90aWZ5RXJyb3IiLCJub3RpZnlDb21wbGV0ZSIsInN1YnNjcmliZVRvUmVzdWx0Iiwib3V0ZXJTdWJzY3JpYmVyIiwiT3V0ZXJTdWJzY3JpYmVyX091dGVyU3Vic2NyaWJlciIsIk91dGVyU3Vic2NyaWJlciIsImlubmVyVmFsdWUiLCJpbm5lckluZGV4IiwiaW5uZXJTdWIiLCJmb3JrSm9pbiIsInNvdXJjZXMiLCJwb3AiLCJmb3JrSm9pbl9Gb3JrSm9pblN1YnNjcmliZXIiLCJGb3JrSm9pblN1YnNjcmliZXIiLCJjb21wbGV0ZWQiLCJoYXZlVmFsdWVzIiwidmFsdWVzIiwiaW5uZXJTdWJzY3JpcHRpb24iLCJfaGFzVmFsdWUiLCJaaXBPcGVyYXRvciIsInppcF9aaXBTdWJzY3JpYmVyIiwiWmlwU3Vic2NyaWJlciIsIml0ZXJhdG9ycyIsInppcF9TdGF0aWNBcnJheUl0ZXJhdG9yIiwiU3RhdGljSXRlcmF0b3IiLCJ6aXBfWmlwQnVmZmVySXRlcmF0b3IiLCJzdGlsbFVuc3Vic2NyaWJlZCIsIm5vdGlmeUluYWN0aXZlIiwiY2hlY2tJdGVyYXRvcnMiLCJoYXNWYWx1ZSIsInNob3VsZENvbXBsZXRlIiwiaGFzQ29tcGxldGVkIiwiX3RyeXJlc3VsdFNlbGVjdG9yIiwibmV4dFJlc3VsdCIsIlN0YXRpY0FycmF5SXRlcmF0b3IiLCJaaXBCdWZmZXJJdGVyYXRvciIsImJ1ZmZlciIsImlzQ29tcGxldGUiLCJkZWJvdW5jZVRpbWUiLCJkdWVUaW1lIiwiRGVib3VuY2VUaW1lT3BlcmF0b3IiLCJkZWJvdW5jZVRpbWVfRGVib3VuY2VUaW1lU3Vic2NyaWJlciIsIkRlYm91bmNlVGltZVN1YnNjcmliZXIiLCJkZWJvdW5jZWRTdWJzY3JpcHRpb24iLCJsYXN0VmFsdWUiLCJjbGVhckRlYm91bmNlIiwiZGlzcGF0Y2hOZXh0IiwiZGVib3VuY2VkTmV4dCIsImZpbHRlciIsInByZWRpY2F0ZSIsIkZpbHRlck9wZXJhdG9yIiwiZmlsdGVyX0ZpbHRlclN1YnNjcmliZXIiLCJGaWx0ZXJTdWJzY3JpYmVyIiwiZGlzdGluY3QiLCJrZXlTZWxlY3RvciIsImZsdXNoZXMiLCJEaXN0aW5jdE9wZXJhdG9yIiwiZGlzdGluY3RfRGlzdGluY3RTdWJzY3JpYmVyIiwiRGlzdGluY3RTdWJzY3JpYmVyIiwiU2V0IiwiY2xlYXIiLCJfdXNlS2V5U2VsZWN0b3IiLCJfZmluYWxpemVOZXh0IiwiaGFzIiwiUGFpcndpc2VPcGVyYXRvciIsInBhaXJ3aXNlX1BhaXJ3aXNlU3Vic2NyaWJlciIsIlBhaXJ3aXNlU3Vic2NyaWJlciIsImhhc1ByZXYiLCJ0YWtlVW50aWwiLCJub3RpZmllciIsInRha2VVbnRpbF9UYWtlVW50aWxPcGVyYXRvciIsIlRha2VVbnRpbE9wZXJhdG9yIiwidGFrZVVudGlsU3Vic2NyaWJlciIsInRha2VVbnRpbF9UYWtlVW50aWxTdWJzY3JpYmVyIiwibm90aWZpZXJTdWJzY3JpcHRpb24iLCJzZWVuVmFsdWUiLCJUYWtlVW50aWxTdWJzY3JpYmVyIiwiU3dpdGNoTWFwT3BlcmF0b3IiLCJzd2l0Y2hNYXBfU3dpdGNoTWFwU3Vic2NyaWJlciIsIlN3aXRjaE1hcFN1YnNjcmliZXIiLCJfaW5uZXJTdWIiLCJpbm5lclN1YnNjcmliZXIiLCJQaXRhbmplIiwiW29iamVjdCBPYmplY3RdIiwidGV4dCIsImF1dG9yIiwia2F0ZWRyYSIsInByZWRtZXQiLCJvZGdvdm9yaSIsIm9kZyIsIk9kZ292b3IiLCJzYWRyemFqIiwicG9lbmkiLCJhdXRvcnIiLCJVc2VyIiwiaW1lIiwic2lmIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImxhamtvdmFuaU9kZyIsInVybCIsInJpaVN0cmVhbSIsImVlblN0cmVhbSIsInVwc1N0cmVhbSIsImlkVXNlciIsImxpc3RhUGl0YW5qYSIsInJpaSIsImVlbiIsInVwcyIsImNvbnRyb2xTdHJlYW0iLCJnZW5lcmlzaU5hc2xvdiIsIm5hc2xvdiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsIm90YWMiLCJsb2dvdXRCdXR0b24iLCJjbGFzc05hbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJtb2phUGl0YW5qYSIsImNsZWFyRHVnbWUiLCJvbmNsaWNrIiwibmFjcnRhalBpdGFuamEiLCJxdWVyeVNlbGVjdG9yIiwiZXYiLCJwb2RhY2kiLCJtZXRob2QiLCJoZWFkZXJzIiwiSGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmZXRjaCIsInJlc3BvbnNlIiwianNvbiIsInVzZXIiLCJsb2ciLCJnZW5lcmlzaUxvZ2luIiwiZ2VuZXJpc2lTaWduVXAiLCJkb2RhalBpdGFuamEiLCJwYXIiLCJ1c2VyTmFtZURvbSIsInBhc3N3b3JkRG9tIiwidHlwZSIsImRpdiIsImxhYmVsYTEiLCJsYWJlbGEyIiwiZGl2MSIsImRpdjIiLCJsb2dpbktvbWVudGFyIiwiZHVnbWUiLCJkb20iLCJwb2tyZW5pIiwidmlkaVVzZXIiLCJsb2dpbiIsImlucHV0MiIsImxhYmVsYSIsInRyaW0iLCJyZWZyZXNoTGFiZWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwibml6Iiwibm92aVVzZXIiLCJzaWduVXNlciIsInNpZ25VcCIsInBvcnVrYSIsInByb2ZpbCIsIm1haW4iLCJwaXRhbmphIiwiZm9ybWEiLCJwcmV0cmFnYURvbSIsImJ1dCIsInZyYXRpUGl0YW5qYVByZWRtZXQiLCJwcmV0cmFnYURvbTIiLCJpbnAyIiwibW92aWVzIiwidnJhdGlQaXRhbmphU2FkcnphaiIsIm5vdm9EdWdtZSIsIm5ham5vdmlqYSIsInN1YkFsbCIsInJlZG9tIiwiaXNwb2NldGthIiwicGFyb3ZpRHVnbWUiLCJhIiwiZ2VuZXJhdG9yIiwicGFyc2VJbnQiLCJqZWRpbnN0dmVuaSIsInBydm9QaXRhbmplIiwicGl0YW5qZSIsImRydWdvUGl0YW5qZSIsInZyYXRpUGFyUGl0YW5qYSIsImVsZW1lbnQiLCJwcmlrYXppU3RyZWFtIiwicmVzaVN1YlVuc3ViIiwidW5zdWJCdXR0b24iLCJkdWciLCJsaW5pamEiLCJkb2RhalN1YkJ1dHRvbmUiLCJ0ZXh0SW5wdXQiLCJyb3dzIiwiY29scyIsImRvZGFqUG9samVaYVVub3MiLCJzZWxEaXYiLCJsYWIiLCJzZWxla3QiLCJvcGNpamEiLCJsYWJlbCIsIm5heml2UHJlZG1ldGEiLCJtYXJnaW5MZWZ0Iiwibm92b1BpdGFuamUiLCJwYXlsb2FkIiwicHJvc2xlZGlQaXRhbmplIiwiZG9kYWpFbGVtZW50ZVBpdGFuamEiLCJrb250ZWpuZXIiLCJzdHJlYW1OYXNsb3YiLCJkb2siLCJkaXZTdHJlYW0iLCJkb2RhalN0cmVhbSIsIm5hcHVuaUZvcm11IiwiZ2VuZXJpc2lQcm9maWwiLCJ1Y2l0YWoiLCJjYXRjaCIsInJlYXNvbiIsImhvc3QiLCJlbCIsIm9kZ292b3IiLCJkb2Rhak9kZ292b3IiLCJmbGFnIiwiYXV0b3JMYWJlbGEiLCJkZWxldGVCdXR0b24iLCJvZHN0YW1wYWpQaXRhbmplSU9kZ292b3JlIiwicHJpa2F6aU9kZ292b3JlIiwic3dpdGNoTWFwIiwiaWkiLCJkb2JhdmkiLCJicm9qIiwic3R2b3JpT2JzZXJ2YWJsZVBpdGFuamEiLCJvYnNlcnZhYmxlcyIsInppcCIsIm5pek9kVHJpIiwiemlwdWpTdHJlYW1vdmUiLCJrb24iLCJvdGFjT2Rnb3ZvcmkiLCJvZGdEaXYiLCJoZWFkZXJPZGciLCJ1cHZvdGVCdXR0b24iLCJib2R5T2RnIiwicG9zYWxqaUtvbWVudGFyIiwib2Rnb3ZvckFyZWEiLCJkaXZCdXR0b24iLCJkYWpPZGdvdm9yIiwibGFqayIsInJldHJ1biIsIm5vdmlPZGdvdm9yIiwicGl0YW5qZU9iaiIsInN0cmVhbSIsImR1eiIsInRvayJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUss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ZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MgPSBmYWxzZTtcbmV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICBzZXQgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IC8qQF9fUFVSRV9fKi8gbmV3IEVycm9yKCk7XG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovIGNvbnNvbGUud2FybignREVQUkVDQVRFRCEgUnhKUyB3YXMgc2V0IHRvIHVzZSBkZXByZWNhdGVkIHN5bmNocm9ub3VzIGVycm9yIGhhbmRsaW5nIGJlaGF2aW9yIGJ5IGNvZGUgYXQ6IFxcbicgKyBlcnJvci5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzKSB7XG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovIGNvbnNvbGUubG9nKCdSeEpTOiBCYWNrIHRvIGEgYmV0dGVyIGVycm9yIGJlaGF2aW9yLiBUaGFuayB5b3UuIDwzJyk7XG4gICAgICAgIH1cbiAgICAgICAgX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXQgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZygpIHtcbiAgICAgICAgcmV0dXJuIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncztcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBob3N0UmVwb3J0RXJyb3IoZXJyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob3N0UmVwb3J0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9jb25maWcsX3V0aWxfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGhvc3RSZXBvcnRFcnJvciB9IGZyb20gJy4vdXRpbC9ob3N0UmVwb3J0RXJyb3InO1xuZXhwb3J0IHZhciBlbXB0eSA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcbiAgICByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc09iamVjdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzID9cbiAgICAgICAgZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJykgOiAnJztcbiAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5VbnN1YnNjcmlwdGlvbkVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfaXNBcnJheSxfdXRpbF9pc09iamVjdCxfdXRpbF9pc0Z1bmN0aW9uLF91dGlsX1Vuc3Vic2NyaXB0aW9uRXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi91dGlsL2lzT2JqZWN0JztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xudmFyIFN1YnNjcmlwdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24odW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhhc0Vycm9ycyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfcGFyZW50ID0gX2EuX3BhcmVudCwgX3BhcmVudHMgPSBfYS5fcGFyZW50cywgX3Vuc3Vic2NyaWJlID0gX2EuX3Vuc3Vic2NyaWJlLCBfc3Vic2NyaXB0aW9ucyA9IF9hLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBsZW4gPSBfcGFyZW50cyA/IF9wYXJlbnRzLmxlbmd0aCA6IDA7XG4gICAgICAgIHdoaWxlIChfcGFyZW50KSB7XG4gICAgICAgICAgICBfcGFyZW50LnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgIF9wYXJlbnQgPSArK2luZGV4IDwgbGVuICYmIF9wYXJlbnRzW2luZGV4XSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKF91bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgX3Vuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGhhc0Vycm9ycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpIDogW2VdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KF9zdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGxlbiA9IF9zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IF9zdWJzY3JpcHRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3Qoc3ViKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9ycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KGZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyhlLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc0Vycm9ycykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRlYXJkb3duO1xuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZWFyZG93bikge1xuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGVhcmRvd24pO1xuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uID09PSB0aGlzIHx8IHN1YnNjcmlwdGlvbi5jbG9zZWQgfHwgdHlwZW9mIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIShzdWJzY3JpcHRpb24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9zdWJzY3JpcHRpb25zID0gW3RtcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGlmICghdGVhcmRvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgdGVhcmRvd24gJyArIHRlYXJkb3duICsgJyBhZGRlZCB0byBTdWJzY3JpcHRpb24uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbi5fYWRkUGFyZW50KHRoaXMpKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IFtzdWJzY3JpcHRpb25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbkluZGV4ID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5zcGxpY2Uoc3Vic2NyaXB0aW9uSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9wYXJlbnQgPSBfYS5fcGFyZW50LCBfcGFyZW50cyA9IF9hLl9wYXJlbnRzO1xuICAgICAgICBpZiAoX3BhcmVudCA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIV9wYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFfcGFyZW50cykge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50cyA9IFtwYXJlbnRdO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudHMuaW5kZXhPZihwYXJlbnQpID09PSAtMSkge1xuICAgICAgICAgICAgX3BhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uIChlbXB0eSkge1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfShuZXcgU3Vic2NyaXB0aW9uKCkpKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZnVuY3Rpb24gZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGVycm9ycykge1xuICAgIHJldHVybiBlcnJvcnMucmVkdWNlKGZ1bmN0aW9uIChlcnJzLCBlcnIpIHsgcmV0dXJuIGVycnMuY29uY2F0KChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSA/IGVyci5lcnJvcnMgOiBlcnIpOyB9LCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHJ4U3Vic2NyaWJlciA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbidcbiAgICA/IC8qQF9fUFVSRV9fKi8gU3ltYm9sKCdyeFN1YnNjcmliZXInKVxuICAgIDogJ0BAcnhTdWJzY3JpYmVyXycgKyAvKkBfX1BVUkVfXyovIE1hdGgucmFuZG9tKCk7XG5leHBvcnQgdmFyICQkcnhTdWJzY3JpYmVyID0gcnhTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnhTdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9pc0Z1bmN0aW9uLF9PYnNlcnZlcixfU3Vic2NyaXB0aW9uLF9pbnRlcm5hbF9zeW1ib2xfcnhTdWJzY3JpYmVyLF9jb25maWcsX3V0aWxfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZW1wdHkgYXMgZW1wdHlPYnNlcnZlciB9IGZyb20gJy4vT2JzZXJ2ZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXInO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaG9zdFJlcG9ydEVycm9yIH0gZnJvbSAnLi91dGlsL2hvc3RSZXBvcnRFcnJvcic7XG52YXIgU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb25Pck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zeW5jRXJyb3JWYWx1ZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZW1wdHlPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoIWRlc3RpbmF0aW9uT3JOZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZW1wdHlPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25Pck5leHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbk9yTmV4dCBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGRlc3RpbmF0aW9uT3JOZXh0LnN5bmNFcnJvclRocm93YWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb25Pck5leHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbk9yTmV4dC5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKF90aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKF90aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlW3J4U3Vic2NyaWJlclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIHN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfcGFyZW50ID0gX2EuX3BhcmVudCwgX3BhcmVudHMgPSBfYS5fcGFyZW50cztcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gX3BhcmVudDtcbiAgICAgICAgdGhpcy5fcGFyZW50cyA9IF9wYXJlbnRzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihfcGFyZW50U3Vic2NyaWJlciwgb2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcGFyZW50U3Vic2NyaWJlciA9IF9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcztcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0O1xuICAgICAgICAgICAgZXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvcjtcbiAgICAgICAgICAgIGNvbXBsZXRlID0gb2JzZXJ2ZXJPck5leHQuY29tcGxldGU7XG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXJPck5leHQgIT09IGVtcHR5T2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dC51bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkKGNvbnRleHQudW5zdWJzY3JpYmUuYmluZChjb250ZXh0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHQudW5zdWJzY3JpYmUgPSBfdGhpcy51bnN1YnNjcmliZS5iaW5kKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIF90aGlzLl9uZXh0ID0gbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgIF90aGlzLl9jb21wbGV0ZSA9IGNvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQgJiYgdGhpcy5fbmV4dCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHRoaXMuX25leHQsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB0aGlzLl9uZXh0LCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIHZhciB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nID0gY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc7XG4gICAgICAgICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9lcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHRoaXMuX2Vycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlZENvbXBsZXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NvbXBsZXRlLmNhbGwoX3RoaXMuX2NvbnRleHQpOyB9O1xuICAgICAgICAgICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih3cmFwcGVkQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgd3JhcHBlZENvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JVbnN1YiA9IGZ1bmN0aW9uIChmbiwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclNldEVycm9yID0gZnVuY3Rpb24gKHBhcmVudCwgZm4sIHZhbHVlKSB7XG4gICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIGNhbGwnKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgICAgIHBhcmVudC5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmVudFN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICBfcGFyZW50U3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9ub29wIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL25vb3AnO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKCFmbnMpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX2NhblJlcG9ydEVycm9yLF91dGlsX3RvU3Vic2NyaWJlcixfaW50ZXJuYWxfc3ltYm9sX29ic2VydmFibGUsX3V0aWxfcGlwZSxfY29uZmlnIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNhblJlcG9ydEVycm9yIH0gZnJvbSAnLi91dGlsL2NhblJlcG9ydEVycm9yJztcbmltcG9ydCB7IHRvU3Vic2NyaWJlciB9IGZyb20gJy4vdXRpbC90b1N1YnNjcmliZXInO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG52YXIgT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLl9pc1NjYWxhciA9IGZhbHNlO1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IHRoaXMub3BlcmF0b3I7XG4gICAgICAgIHZhciBzaW5rID0gdG9TdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBpZiAob3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKG9wZXJhdG9yLmNhbGwoc2luaywgdGhpcy5zb3VyY2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKHRoaXMuc291cmNlIHx8IChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiAhc2luay5zeW5jRXJyb3JUaHJvd2FibGUpID9cbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUoc2luaykgOlxuICAgICAgICAgICAgICAgIHRoaXMuX3RyeVN1YnNjcmliZShzaW5rKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICBpZiAoc2luay5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBzaW5rLnN5bmNFcnJvclZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2luaztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2luay5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5SZXBvcnRFcnJvcihzaW5rKSkge1xuICAgICAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVqZWN0LCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICByZXR1cm4gc291cmNlICYmIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gdmFsdWUgPSB4OyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgaWYgKCFwcm9taXNlQ3Rvcikge1xuICAgICAgICBwcm9taXNlQ3RvciA9IGNvbmZpZy5Qcm9taXNlIHx8IFByb21pc2U7XG4gICAgfVxuICAgIGlmICghcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBQcm9taXNlIGltcGwgZm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VDdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YnNjcmliZXIsX3N5bWJvbF9yeFN1YnNjcmliZXIsX09ic2VydmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IHJ4U3Vic2NyaWJlciBhcyByeFN1YnNjcmliZXJTeW1ib2wgfSBmcm9tICcuLi9zeW1ib2wvcnhTdWJzY3JpYmVyJztcbmltcG9ydCB7IGVtcHR5IGFzIGVtcHR5T2JzZXJ2ZXIgfSBmcm9tICcuLi9PYnNlcnZlcic7XG5leHBvcnQgZnVuY3Rpb24gdG9TdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICBpZiAobmV4dE9yT2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyIGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJTeW1ib2xdKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXJbcnhTdWJzY3JpYmVyU3ltYm9sXSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbmV4dE9yT2JzZXJ2ZXIgJiYgIWVycm9yICYmICFjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmliZXIoZW1wdHlPYnNlcnZlcik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNhblJlcG9ydEVycm9yKG9ic2VydmVyKSB7XG4gICAgd2hpbGUgKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfYSA9IG9ic2VydmVyLCBjbG9zZWRfMSA9IF9hLmNsb3NlZCwgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbiwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkO1xuICAgICAgICBpZiAoY2xvc2VkXzEgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24gaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICBvYnNlcnZlciA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FuUmVwb3J0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5mdW5jdGlvbiBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwoKSB7XG4gICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgdGhpcy5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICByZXR1cm4gdGhpcztcbn1cbk9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbmV4cG9ydCB2YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmlwdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3ViamVjdFN1YnNjcmlwdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaXB0aW9uKHN1YmplY3QsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0U3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB2YXIgc3ViamVjdCA9IHRoaXMuc3ViamVjdDtcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHN1YmplY3Qub2JzZXJ2ZXJzO1xuICAgICAgICB0aGlzLnN1YmplY3QgPSBudWxsO1xuICAgICAgICBpZiAoIW9ic2VydmVycyB8fCBvYnNlcnZlcnMubGVuZ3RoID09PSAwIHx8IHN1YmplY3QuaXNTdG9wcGVkIHx8IHN1YmplY3QuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmliZXJJbmRleCA9IG9ic2VydmVycy5pbmRleE9mKHRoaXMuc3Vic2NyaWJlcik7XG4gICAgICAgIGlmIChzdWJzY3JpYmVySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBvYnNlcnZlcnMuc3BsaWNlKHN1YnNjcmliZXJJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0U3Vic2NyaXB0aW9uO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YmplY3RTdWJzY3JpcHRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3RTdWJzY3JpcHRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PYnNlcnZhYmxlLF9TdWJzY3JpYmVyLF9TdWJzY3JpcHRpb24sX3V0aWxfT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IsX1N1YmplY3RTdWJzY3JpcHRpb24sX2ludGVybmFsX3N5bWJvbF9yeFN1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBPYmplY3RVbnN1YnNjcmliZWRFcnJvciB9IGZyb20gJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG5pbXBvcnQgeyBTdWJqZWN0U3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJqZWN0U3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHJ4U3Vic2NyaWJlciBhcyByeFN1YnNjcmliZXJTeW1ib2wgfSBmcm9tICcuLi9pbnRlcm5hbC9zeW1ib2wvcnhTdWJzY3JpYmVyJztcbnZhciBTdWJqZWN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU3ViamVjdFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFN1YmplY3RTdWJzY3JpYmVyIH07XG52YXIgU3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3QoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0LnByb3RvdHlwZVtyeFN1YnNjcmliZXJTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YmplY3RTdWJzY3JpYmVyKHRoaXMpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBBbm9ueW1vdXNTdWJqZWN0KHRoaXMsIHRoaXMpO1xuICAgICAgICBzdWJqZWN0Lm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGNvcHkgPSBvYnNlcnZlcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb3B5W2ldLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb3B5W2ldLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICAgICAgdmFyIGNvcHkgPSBvYnNlcnZlcnMuc2xpY2UoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29weVtpXS5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCA9IDA7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gbnVsbDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3RyeVN1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRoaXMudGhyb3duRXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN1YmplY3RTdWJzY3JpcHRpb24odGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgU3ViamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdDtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgU3ViamVjdCB9O1xudmFyIEFub255bW91c1N1YmplY3QgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQW5vbnltb3VzU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uICYmIGRlc3RpbmF0aW9uLm5leHQpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uICYmIGRlc3RpbmF0aW9uLmVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24uY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBbm9ueW1vdXNTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBBbm9ueW1vdXNTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbmV4cG9ydCB2YXIgJCRpdGVyYXRvciA9IGl0ZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHN1YnNjcmliZVRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbiAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvQXJyYXkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24sX3V0aWxfc3Vic2NyaWJlVG9BcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9BcnJheSB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9BcnJheSc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlVG9BcnJheShpbnB1dCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbnB1dFtpKytdKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Yi5hZGQodGhpcy5zY2hlZHVsZSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gc3ViO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tQXJyYXkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9ob3N0UmVwb3J0RXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaG9zdFJlcG9ydEVycm9yIH0gZnJvbSAnLi9ob3N0UmVwb3J0RXJyb3InO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIGhvc3RSZXBvcnRFcnJvcik7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9Qcm9taXNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX2l0ZXJhdG9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5leHBvcnQgdmFyIHN1YnNjcmliZVRvSXRlcmFibGUgPSBmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGVbU3ltYm9sX2l0ZXJhdG9yXSgpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGlmIChpdGVtLmRvbmUpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaXRlbS52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3IucmV0dXJuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICBpdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvSXRlcmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zeW1ib2xfb2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb09ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBvYnMgPSBvYmpbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb09ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9zdWJzY3JpYmVUb0FycmF5LF9zdWJzY3JpYmVUb1Byb21pc2UsX3N1YnNjcmliZVRvSXRlcmFibGUsX3N1YnNjcmliZVRvT2JzZXJ2YWJsZSxfaXNBcnJheUxpa2UsX2lzUHJvbWlzZSxfaXNPYmplY3QsX3N5bWJvbF9pdGVyYXRvcixfc3ltYm9sX29ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9BcnJheSB9IGZyb20gJy4vc3Vic2NyaWJlVG9BcnJheSc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Byb21pc2UgfSBmcm9tICcuL3N1YnNjcmliZVRvUHJvbWlzZSc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb0l0ZXJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmVUb0l0ZXJhYmxlJztcbmltcG9ydCB7IHN1YnNjcmliZVRvT2JzZXJ2YWJsZSB9IGZyb20gJy4vc3Vic2NyaWJlVG9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4vaXNPYmplY3QnO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIHN1YnNjcmliZVRvID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5faXNTY2FsYXIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICghIXJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0W1N5bWJvbF9vYnNlcnZhYmxlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlVG9PYnNlcnZhYmxlKHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvQXJyYXkocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvUHJvbWlzZShyZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlIGlmICghIXJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0W1N5bWJvbF9pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvSXRlcmFibGUocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGlzT2JqZWN0KHJlc3VsdCkgPyAnYW4gaW52YWxpZCBvYmplY3QnIDogXCInXCIgKyByZXN1bHQgKyBcIidcIjtcbiAgICAgICAgdmFyIG1zZyA9IFwiWW91IHByb3ZpZGVkIFwiICsgdmFsdWUgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuXCJcbiAgICAgICAgICAgICsgJyBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgQXJyYXksIG9yIEl0ZXJhYmxlLic7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG8uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX2lzUHJvbWlzZSxfdXRpbF9pc0FycmF5TGlrZSxfdXRpbF9pc0ludGVyb3BPYnNlcnZhYmxlLF91dGlsX2lzSXRlcmFibGUsX2Zyb21BcnJheSxfZnJvbVByb21pc2UsX2Zyb21JdGVyYWJsZSxfZnJvbU9ic2VydmFibGUsX3V0aWxfc3Vic2NyaWJlVG8gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBmcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG5pbXBvcnQgeyBmcm9tUHJvbWlzZSB9IGZyb20gJy4vZnJvbVByb21pc2UnO1xuaW1wb3J0IHsgZnJvbUl0ZXJhYmxlIH0gZnJvbSAnLi9mcm9tSXRlcmFibGUnO1xuaW1wb3J0IHsgZnJvbU9ic2VydmFibGUgfSBmcm9tICcuL2Zyb21PYnNlcnZhYmxlJztcbmltcG9ydCB7IHN1YnNjcmliZVRvIH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUbyc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmVUbyhpbnB1dCkpO1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSXRlcmFibGUoaW5wdXQpIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0IHx8IGlucHV0KSArICcgaXMgbm90IG9ic2VydmFibGUnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zeW1ib2xfb2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgJiYgdHlwZW9mIGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24sX3N5bWJvbF9vYnNlcnZhYmxlLF91dGlsX3N1YnNjcmliZVRvT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHN1YnNjcmliZVRvT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZVRvT2JzZXJ2YWJsZShpbnB1dCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgICAgICAgICAgc3ViLmFkZChvYnNlcnZhYmxlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7IH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSkpOyB9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pKTsgfSxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gc3ViO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tT2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX1N1YnNjcmlwdGlvbixfdXRpbF9zdWJzY3JpYmVUb1Byb21pc2UgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9Qcm9taXNlJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZVRvUHJvbWlzZShpbnB1dCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHN1YjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbVByb21pc2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zeW1ib2xfaXRlcmF0b3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ICYmIHR5cGVvZiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJdGVyYWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX1N1YnNjcmlwdGlvbixfc3ltYm9sX2l0ZXJhdG9yLF91dGlsX3N1YnNjcmliZVRvSXRlcmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb0l0ZXJhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICBpZiAoIXNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlVG9JdGVyYWJsZShpbnB1dCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICAgICAgc3ViLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhdG9yICYmIHR5cGVvZiBpdGVyYXRvci5yZXR1cm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHJlc3VsdC5kb25lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiBzdWI7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21JdGVyYWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBtYXBPcGVyYXRpb24oc291cmNlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvamVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgaXMgbm90IGEgZnVuY3Rpb24uIEFyZSB5b3UgbG9va2luZyBmb3IgYG1hcFRvKClgPycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgTWFwT3BlcmF0b3IocHJvamVjdCwgdGhpc0FyZykpO1xuICAgIH07XG59XG52YXIgTWFwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFwT3BlcmF0b3IocHJvamVjdCwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnO1xuICAgIH1cbiAgICBNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0LCB0aGlzLnRoaXNBcmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBNYXBPcGVyYXRvciB9O1xudmFyIE1hcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWFwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZyB8fCBfdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfdXRpbF9pc0FycmF5LF91dGlsX2lzRnVuY3Rpb24sX29wZXJhdG9yc19tYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tYXAnO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGlzQXJyYXkoYXJncykgPyByZXN1bHRTZWxlY3Rvci5hcHBseSh2b2lkIDAsIGFyZ3MpIDogcmVzdWx0U2VsZWN0b3IoYXJncyk7IH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoZSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNldHVwU3Vic2NyaXB0aW9uKHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyLCBvcHRpb25zKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldHVwU3Vic2NyaXB0aW9uKHNvdXJjZU9iaiwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyLCBvcHRpb25zKSB7XG4gICAgdmFyIHVuc3Vic2NyaWJlO1xuICAgIGlmIChpc0V2ZW50VGFyZ2V0KHNvdXJjZU9iaikpIHtcbiAgICAgICAgdmFyIHNvdXJjZV8xID0gc291cmNlT2JqO1xuICAgICAgICBzb3VyY2VPYmouYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZV8xLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopKSB7XG4gICAgICAgIHZhciBzb3VyY2VfMiA9IHNvdXJjZU9iajtcbiAgICAgICAgc291cmNlT2JqLm9uKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlXzIub2ZmKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHNvdXJjZU9iaikpIHtcbiAgICAgICAgdmFyIHNvdXJjZV8zID0gc291cmNlT2JqO1xuICAgICAgICBzb3VyY2VPYmouYWRkTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2VfMy5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChzb3VyY2VPYmogJiYgc291cmNlT2JqLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc291cmNlT2JqLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzZXR1cFN1YnNjcmlwdGlvbihzb3VyY2VPYmpbaV0sIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgZXZlbnQgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHN1YnNjcmliZXIuYWRkKHVuc3Vic2NyaWJlKTtcbn1cbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHNvdXJjZU9iaikge1xuICAgIHJldHVybiBzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5hZGRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLnJlbW92ZUxpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gc291cmNlT2JqICYmIHR5cGVvZiBzb3VyY2VPYmoub24gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZU9iai5vZmYgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHNvdXJjZU9iaikge1xuICAgIHJldHVybiBzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzb3VyY2VPYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmlwdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbnZhciBBY3Rpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQWN0aW9uO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IEFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfQWN0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL0FjdGlvbic7XG52YXIgQXN5bmNBY3Rpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXN5bmNBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgX3RoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuaWQgfHwgdGhpcy5yZXF1ZXN0QXN5bmNJZChzY2hlZHVsZXIsIHRoaXMuaWQsIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCB0aGlzKSwgZGVsYXkpO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbGF5ICE9PSBudWxsICYmIHRoaXMuZGVsYXkgPT09IGRlbGF5ICYmIHRoaXMucGVuZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgICAgICBjbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2V4ZWN1dGluZyBhIGNhbmNlbGxlZCBhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIHRoaXMuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQodGhpcy5zY2hlZHVsZXIsIHRoaXMuaWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIHZhciBlcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvclZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53b3JrKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICBlcnJvclZhbHVlID0gISFlICYmIGUgfHwgbmV3IEVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcmVkKSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JWYWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICB2YXIgaW5kZXggPSBhY3Rpb25zLmluZGV4T2YodGhpcyk7XG4gICAgICAgIHRoaXMud29yayA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jQWN0aW9uO1xufShBY3Rpb24pKTtcbmV4cG9ydCB7IEFzeW5jQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY0FjdGlvbi5qcy5tYXBcbiIsInZhciBTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbm93ID0gU2NoZWR1bGVyLm5vdztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLlNjaGVkdWxlckFjdGlvbiA9IFNjaGVkdWxlckFjdGlvbjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLlNjaGVkdWxlckFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIERhdGUubm93KCk7IH07XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX0FzeW5jQWN0aW9uLF9Bc3luY1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgYXN5bmMgPSAvKkBfX1BVUkVfXyovIG5ldyBBc3luY1NjaGVkdWxlcihBc3luY0FjdGlvbik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1NjaGVkdWxlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU2NoZWR1bGVyIH0gZnJvbSAnLi4vU2NoZWR1bGVyJztcbnZhciBBc3luY1NjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG5vdyA9IFNjaGVkdWxlci5ub3c7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgJiYgQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgIT09IF90aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlLm5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY3Rpb25zID0gW107XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZSAmJiBBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZSAhPT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlLnNjaGVkdWxlKHdvcmssIGRlbGF5LCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5zY2hlZHVsZS5jYWxsKHRoaXMsIHdvcmssIGRlbGF5LCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXN5bmNTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfc2NoZWR1bGVyX2FzeW5jLF91dGlsX2lzTnVtZXJpYyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBhc3luYyB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc051bWVyaWMgfSBmcm9tICcuLi91dGlsL2lzTnVtZXJpYyc7XG5leHBvcnQgZnVuY3Rpb24gaW50ZXJ2YWwocGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAocGVyaW9kID09PSB2b2lkIDApIHtcbiAgICAgICAgcGVyaW9kID0gMDtcbiAgICB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICBpZiAoIWlzTnVtZXJpYyhwZXJpb2QpIHx8IHBlcmlvZCA8IDApIHtcbiAgICAgICAgcGVyaW9kID0gMDtcbiAgICB9XG4gICAgaWYgKCFzY2hlZHVsZXIgfHwgdHlwZW9mIHNjaGVkdWxlci5zY2hlZHVsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaCwgcGVyaW9kLCB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIGNvdW50ZXI6IDAsIHBlcmlvZDogcGVyaW9kIH0pKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChzdGF0ZSkge1xuICAgIHZhciBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlciwgY291bnRlciA9IHN0YXRlLmNvdW50ZXIsIHBlcmlvZCA9IHN0YXRlLnBlcmlvZDtcbiAgICBzdWJzY3JpYmVyLm5leHQoY291bnRlcik7XG4gICAgdGhpcy5zY2hlZHVsZSh7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIsIGNvdW50ZXI6IGNvdW50ZXIgKyAxLCBwZXJpb2Q6IHBlcmlvZCB9LCBwZXJpb2QpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9pc0FycmF5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuL2lzQXJyYXknO1xuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtZXJpYyh2YWwpIHtcbiAgICByZXR1cm4gIWlzQXJyYXkodmFsKSAmJiAodmFsIC0gcGFyc2VGbG9hdCh2YWwpICsgMSkgPj0gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzTnVtZXJpYy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IHZhciBFTVBUWSA9IC8qQF9fUFVSRV9fKi8gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5leHBvcnQgZnVuY3Rpb24gZW1wdHkoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikgOiBFTVBUWTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbXB0eVNjaGVkdWxlZChzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtcHR5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG52YXIgSW5uZXJTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKElubmVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbm5lclN1YnNjcmliZXIocGFyZW50LCBvdXRlclZhbHVlLCBvdXRlckluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgX3RoaXMub3V0ZXJWYWx1ZSA9IG91dGVyVmFsdWU7XG4gICAgICAgIF90aGlzLm91dGVySW5kZXggPSBvdXRlckluZGV4O1xuICAgICAgICBfdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlOZXh0KHRoaXMub3V0ZXJWYWx1ZSwgdmFsdWUsIHRoaXMub3V0ZXJJbmRleCwgdGhpcy5pbmRleCsrLCB0aGlzKTtcbiAgICB9O1xuICAgIElubmVyU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeUVycm9yKGVycm9yLCB0aGlzKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeUNvbXBsZXRlKHRoaXMpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gSW5uZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBJbm5lclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmVyU3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX0lubmVyU3Vic2NyaWJlcixfc3Vic2NyaWJlVG8gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgSW5uZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vSW5uZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvIH0gZnJvbSAnLi9zdWJzY3JpYmVUbyc7XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlVG9SZXN1bHQob3V0ZXJTdWJzY3JpYmVyLCByZXN1bHQsIG91dGVyVmFsdWUsIG91dGVySW5kZXgsIGRlc3RpbmF0aW9uKSB7XG4gICAgaWYgKGRlc3RpbmF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgICAgZGVzdGluYXRpb24gPSBuZXcgSW5uZXJTdWJzY3JpYmVyKG91dGVyU3Vic2NyaWJlciwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCk7XG4gICAgfVxuICAgIGlmIChkZXN0aW5hdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic2NyaWJlVG8ocmVzdWx0KShkZXN0aW5hdGlvbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVUb1Jlc3VsdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xudmFyIE91dGVyU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhPdXRlclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3V0ZXJTdWJzY3JpYmVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIE91dGVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PdXRlclN1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PYnNlcnZhYmxlLF91dGlsX2lzQXJyYXksX2VtcHR5LF91dGlsX3N1YnNjcmliZVRvUmVzdWx0LF9PdXRlclN1YnNjcmliZXIsX29wZXJhdG9yc19tYXAgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuL2VtcHR5JztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5pbXBvcnQgeyBPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9PdXRlclN1YnNjcmliZXInO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21hcCc7XG5leHBvcnQgZnVuY3Rpb24gZm9ya0pvaW4oKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRTZWxlY3RvcjtcbiAgICBpZiAodHlwZW9mIHNvdXJjZXNbc291cmNlcy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IHNvdXJjZXMucG9wKCk7XG4gICAgfVxuICAgIGlmIChzb3VyY2VzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KHNvdXJjZXNbMF0pKSB7XG4gICAgICAgIHNvdXJjZXMgPSBzb3VyY2VzWzBdO1xuICAgIH1cbiAgICBpZiAoc291cmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEVNUFRZO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZvcmtKb2luKHNvdXJjZXMpLnBpcGUobWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiByZXN1bHRTZWxlY3Rvci5hcHBseSh2b2lkIDAsIGFyZ3MpOyB9KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICByZXR1cm4gbmV3IEZvcmtKb2luU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBzb3VyY2VzKTtcbiAgICB9KTtcbn1cbnZhciBGb3JrSm9pblN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRm9ya0pvaW5TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvcmtKb2luU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgc291cmNlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc291cmNlcyA9IHNvdXJjZXM7XG4gICAgICAgIF90aGlzLmNvbXBsZXRlZCA9IDA7XG4gICAgICAgIF90aGlzLmhhdmVWYWx1ZXMgPSAwO1xuICAgICAgICB2YXIgbGVuID0gc291cmNlcy5sZW5ndGg7XG4gICAgICAgIF90aGlzLnZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpXTtcbiAgICAgICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KF90aGlzLCBzb3VyY2UsIG51bGwsIGkpO1xuICAgICAgICAgICAgaWYgKGlubmVyU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZvcmtKb2luU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLnZhbHVlc1tvdXRlckluZGV4XSA9IGlubmVyVmFsdWU7XG4gICAgICAgIGlmICghaW5uZXJTdWIuX2hhc1ZhbHVlKSB7XG4gICAgICAgICAgICBpbm5lclN1Yi5faGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5oYXZlVmFsdWVzKys7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZvcmtKb2luU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbiwgaGF2ZVZhbHVlcyA9IF9hLmhhdmVWYWx1ZXMsIHZhbHVlcyA9IF9hLnZhbHVlcztcbiAgICAgICAgdmFyIGxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgIGlmICghaW5uZXJTdWIuX2hhc1ZhbHVlKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29tcGxldGVkKys7XG4gICAgICAgIGlmICh0aGlzLmNvbXBsZXRlZCAhPT0gbGVuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhdmVWYWx1ZXMgPT09IGxlbikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRm9ya0pvaW5TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcmtKb2luLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfZnJvbUFycmF5LF91dGlsX2lzQXJyYXksX1N1YnNjcmliZXIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCxfLi5faW50ZXJuYWxfc3ltYm9sX2l0ZXJhdG9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBmcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yJztcbmV4cG9ydCBmdW5jdGlvbiB6aXAoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheShvYnNlcnZhYmxlcywgdW5kZWZpbmVkKS5saWZ0KG5ldyBaaXBPcGVyYXRvcihyZXN1bHRTZWxlY3RvcikpO1xufVxudmFyIFppcE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFppcE9wZXJhdG9yKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgWmlwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBaaXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucmVzdWx0U2VsZWN0b3IpKTtcbiAgICB9O1xuICAgIHJldHVybiBaaXBPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBaaXBPcGVyYXRvciB9O1xudmFyIFppcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoWmlwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBaaXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCByZXN1bHRTZWxlY3RvciwgdmFsdWVzKSB7XG4gICAgICAgIGlmICh2YWx1ZXMgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXRlcmF0b3JzID0gW107XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIF90aGlzLnJlc3VsdFNlbGVjdG9yID0gKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykgPyByZXN1bHRTZWxlY3RvciA6IG51bGw7XG4gICAgICAgIF90aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaXRlcmF0b3JzID0gdGhpcy5pdGVyYXRvcnM7XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFN0YXRpY0FycmF5SXRlcmF0b3IodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWVbU3ltYm9sX2l0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFN0YXRpY0l0ZXJhdG9yKHZhbHVlW1N5bWJvbF9pdGVyYXRvcl0oKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlcmF0b3JzLnB1c2gobmV3IFppcEJ1ZmZlckl0ZXJhdG9yKHRoaXMuZGVzdGluYXRpb24sIHRoaXMsIHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9ycyA9IHRoaXMuaXRlcmF0b3JzO1xuICAgICAgICB2YXIgbGVuID0gaXRlcmF0b3JzLmxlbmd0aDtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmUgPSBsZW47XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yc1tpXTtcbiAgICAgICAgICAgIGlmIChpdGVyYXRvci5zdGlsbFVuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKGl0ZXJhdG9yLnN1YnNjcmliZShpdGVyYXRvciwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgWmlwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5SW5hY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlLS07XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBTdWJzY3JpYmVyLnByb3RvdHlwZS5jaGVja0l0ZXJhdG9ycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9ycyA9IHRoaXMuaXRlcmF0b3JzO1xuICAgICAgICB2YXIgbGVuID0gaXRlcmF0b3JzLmxlbmd0aDtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JzW2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvci5oYXNWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXRlcmF0b3IuaGFzVmFsdWUoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgc2hvdWxkQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JzW2ldO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGlmIChpdGVyYXRvci5oYXNDb21wbGV0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHNob3VsZENvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJncy5wdXNoKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyeXJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkQ29tcGxldGUpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlyZXN1bHRTZWxlY3RvciA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc3VsdFNlbGVjdG9yLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBaaXBTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBaaXBTdWJzY3JpYmVyIH07XG52YXIgU3RhdGljSXRlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RhdGljSXRlcmF0b3IoaXRlcmF0b3IpIHtcbiAgICAgICAgdGhpcy5pdGVyYXRvciA9IGl0ZXJhdG9yO1xuICAgICAgICB0aGlzLm5leHRSZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgfVxuICAgIFN0YXRpY0l0ZXJhdG9yLnByb3RvdHlwZS5oYXNWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBTdGF0aWNJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMubmV4dFJlc3VsdDtcbiAgICAgICAgdGhpcy5uZXh0UmVzdWx0ID0gdGhpcy5pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBTdGF0aWNJdGVyYXRvci5wcm90b3R5cGUuaGFzQ29tcGxldGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV4dFJlc3VsdCA9IHRoaXMubmV4dFJlc3VsdDtcbiAgICAgICAgcmV0dXJuIG5leHRSZXN1bHQgJiYgbmV4dFJlc3VsdC5kb25lO1xuICAgIH07XG4gICAgcmV0dXJuIFN0YXRpY0l0ZXJhdG9yO1xufSgpKTtcbnZhciBTdGF0aWNBcnJheUl0ZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRpY0FycmF5SXRlcmF0b3IoYXJyYXkpIHtcbiAgICAgICAgdGhpcy5hcnJheSA9IGFycmF5O1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICB9XG4gICAgU3RhdGljQXJyYXlJdGVyYXRvci5wcm90b3R5cGVbU3ltYm9sX2l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5pbmRleCsrO1xuICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmFycmF5O1xuICAgICAgICByZXR1cm4gaSA8IHRoaXMubGVuZ3RoID8geyB2YWx1ZTogYXJyYXlbaV0sIGRvbmU6IGZhbHNlIH0gOiB7IHZhbHVlOiBudWxsLCBkb25lOiB0cnVlIH07XG4gICAgfTtcbiAgICBTdGF0aWNBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5oYXNWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoID4gdGhpcy5pbmRleDtcbiAgICB9O1xuICAgIFN0YXRpY0FycmF5SXRlcmF0b3IucHJvdG90eXBlLmhhc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoID09PSB0aGlzLmluZGV4O1xuICAgIH07XG4gICAgcmV0dXJuIFN0YXRpY0FycmF5SXRlcmF0b3I7XG59KCkpO1xudmFyIFppcEJ1ZmZlckl0ZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFppcEJ1ZmZlckl0ZXJhdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFppcEJ1ZmZlckl0ZXJhdG9yKGRlc3RpbmF0aW9uLCBwYXJlbnQsIG9ic2VydmFibGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgX3RoaXMub2JzZXJ2YWJsZSA9IG9ic2VydmFibGU7XG4gICAgICAgIF90aGlzLnN0aWxsVW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuYnVmZmVyID0gW107XG4gICAgICAgIF90aGlzLmlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGVbU3ltYm9sX2l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBudWxsLCBkb25lOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogYnVmZmVyLnNoaWZ0KCksIGRvbmU6IGZhbHNlIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5oYXNWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmxlbmd0aCA+IDA7XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUuaGFzQ29tcGxldGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubGVuZ3RoID09PSAwICYmIHRoaXMuaXNDb21wbGV0ZTtcbiAgICB9O1xuICAgIFppcEJ1ZmZlckl0ZXJhdG9yLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlJbmFjdGl2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBaaXBCdWZmZXJJdGVyYXRvci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKGlubmVyVmFsdWUpO1xuICAgICAgICB0aGlzLnBhcmVudC5jaGVja0l0ZXJhdG9ycygpO1xuICAgIH07XG4gICAgWmlwQnVmZmVySXRlcmF0b3IucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvUmVzdWx0KHRoaXMsIHRoaXMub2JzZXJ2YWJsZSwgdGhpcywgaW5kZXgpO1xuICAgIH07XG4gICAgcmV0dXJuIFppcEJ1ZmZlckl0ZXJhdG9yO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3NjaGVkdWxlcl9hc3luYyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgRGVib3VuY2VUaW1lT3BlcmF0b3IoZHVlVGltZSwgc2NoZWR1bGVyKSk7IH07XG59XG52YXIgRGVib3VuY2VUaW1lT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VUaW1lT3BlcmF0b3IoZHVlVGltZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHRoaXMuZHVlVGltZSA9IGR1ZVRpbWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIH1cbiAgICBEZWJvdW5jZVRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERlYm91bmNlVGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdWVUaW1lLCB0aGlzLnNjaGVkdWxlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlYm91bmNlVGltZU9wZXJhdG9yO1xufSgpKTtcbnZhciBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERlYm91bmNlVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVlVGltZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kdWVUaW1lID0gZHVlVGltZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5kZWJvdW5jZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICBfdGhpcy5sYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICBfdGhpcy5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERlYm91bmNlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2xlYXJEZWJvdW5jZSgpO1xuICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hZGQodGhpcy5kZWJvdW5jZWRTdWJzY3JpcHRpb24gPSB0aGlzLnNjaGVkdWxlci5zY2hlZHVsZShkaXNwYXRjaE5leHQsIHRoaXMuZHVlVGltZSwgdGhpcykpO1xuICAgIH07XG4gICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlYm91bmNlZE5leHQoKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuZGVib3VuY2VkTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jbGVhckRlYm91bmNlKCk7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFZhbHVlID0gdGhpcy5sYXN0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQobGFzdFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVib3VuY2VUaW1lU3Vic2NyaWJlci5wcm90b3R5cGUuY2xlYXJEZWJvdW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IHRoaXMuZGVib3VuY2VkU3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoZGVib3VuY2VkU3Vic2NyaXB0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShkZWJvdW5jZWRTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgZGVib3VuY2VkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmRlYm91bmNlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEZWJvdW5jZVRpbWVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5mdW5jdGlvbiBkaXNwYXRjaE5leHQoc3Vic2NyaWJlcikge1xuICAgIHN1YnNjcmliZXIuZGVib3VuY2VkTmV4dCgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2VUaW1lLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZmlsdGVyT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBGaWx0ZXJPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcpKTtcbiAgICB9O1xufVxudmFyIEZpbHRlck9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICB9XG4gICAgRmlsdGVyT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBGaWx0ZXJTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnRoaXNBcmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBGaWx0ZXJPcGVyYXRvcjtcbn0oKSk7XG52YXIgRmlsdGVyU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGaWx0ZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbHRlclN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZpbHRlclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZS5jYWxsKHRoaXMudGhpc0FyZywgdmFsdWUsIHRoaXMuY291bnQrKyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBGaWx0ZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0KGtleVNlbGVjdG9yLCBmbHVzaGVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEaXN0aW5jdE9wZXJhdG9yKGtleVNlbGVjdG9yLCBmbHVzaGVzKSk7IH07XG59XG52YXIgRGlzdGluY3RPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaXN0aW5jdE9wZXJhdG9yKGtleVNlbGVjdG9yLCBmbHVzaGVzKSB7XG4gICAgICAgIHRoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5mbHVzaGVzID0gZmx1c2hlcztcbiAgICB9XG4gICAgRGlzdGluY3RPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IERpc3RpbmN0U3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmtleVNlbGVjdG9yLCB0aGlzLmZsdXNoZXMpKTtcbiAgICB9O1xuICAgIHJldHVybiBEaXN0aW5jdE9wZXJhdG9yO1xufSgpKTtcbnZhciBEaXN0aW5jdFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGlzdGluY3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERpc3RpbmN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwga2V5U2VsZWN0b3IsIGZsdXNoZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmtleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLnZhbHVlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgaWYgKGZsdXNoZXMpIHtcbiAgICAgICAgICAgIF90aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgZmx1c2hlcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGlzdGluY3RTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMudmFsdWVzLmNsZWFyKCk7XG4gICAgfTtcbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLl9lcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICBEaXN0aW5jdFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmtleVNlbGVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLl91c2VLZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9maW5hbGl6ZU5leHQodmFsdWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGlzdGluY3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fdXNlS2V5U2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvbjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGtleSA9IHRoaXMua2V5U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZmluYWxpemVOZXh0KGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgRGlzdGluY3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fZmluYWxpemVOZXh0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuICAgICAgICBpZiAoIXZhbHVlcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdmFsdWVzLmFkZChrZXkpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0U3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBEaXN0aW5jdFN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHBhaXJ3aXNlKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgUGFpcndpc2VPcGVyYXRvcigpKTsgfTtcbn1cbnZhciBQYWlyd2lzZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhaXJ3aXNlT3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIFBhaXJ3aXNlT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBQYWlyd2lzZVN1YnNjcmliZXIoc3Vic2NyaWJlcikpO1xuICAgIH07XG4gICAgcmV0dXJuIFBhaXJ3aXNlT3BlcmF0b3I7XG59KCkpO1xudmFyIFBhaXJ3aXNlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhQYWlyd2lzZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUGFpcndpc2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYXNQcmV2ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUGFpcndpc2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5oYXNQcmV2KSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoW3RoaXMucHJldiwgdmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGFzUHJldiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmV2ID0gdmFsdWU7XG4gICAgfTtcbiAgICByZXR1cm4gUGFpcndpc2VTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWlyd2lzZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gdGFrZVVudGlsKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUYWtlVW50aWxPcGVyYXRvcihub3RpZmllcikpOyB9O1xufVxudmFyIFRha2VVbnRpbE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRha2VVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICB9XG4gICAgVGFrZVVudGlsT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciB0YWtlVW50aWxTdWJzY3JpYmVyID0gbmV3IFRha2VVbnRpbFN1YnNjcmliZXIoc3Vic2NyaWJlcik7XG4gICAgICAgIHZhciBub3RpZmllclN1YnNjcmlwdGlvbiA9IHN1YnNjcmliZVRvUmVzdWx0KHRha2VVbnRpbFN1YnNjcmliZXIsIHRoaXMubm90aWZpZXIpO1xuICAgICAgICBpZiAobm90aWZpZXJTdWJzY3JpcHRpb24gJiYgIXRha2VVbnRpbFN1YnNjcmliZXIuc2VlblZhbHVlKSB7XG4gICAgICAgICAgICB0YWtlVW50aWxTdWJzY3JpYmVyLmFkZChub3RpZmllclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZSh0YWtlVW50aWxTdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFrZVVudGlsU3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlVW50aWxPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFrZVVudGlsU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUYWtlVW50aWxTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRha2VVbnRpbFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNlZW5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRha2VVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5zZWVuVmFsdWUgPSB0cnVlO1xuICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBUYWtlVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlVW50aWxTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VVbnRpbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfSW5uZXJTdWJzY3JpYmVyLF91dGlsX3N1YnNjcmliZVRvUmVzdWx0LF9tYXAsX29ic2VydmFibGVfZnJvbSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IElubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL0lubmVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLnBpcGUoc3dpdGNoTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBmcm9tKHByb2plY3QoYSwgaSkpLnBpcGUobWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KSk7IH0pKTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBTd2l0Y2hNYXBPcGVyYXRvcihwcm9qZWN0KSk7IH07XG59XG52YXIgU3dpdGNoTWFwT3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3dpdGNoTWFwT3BlcmF0b3IocHJvamVjdCkge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBTd2l0Y2hNYXBPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFN3aXRjaE1hcFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5wcm9qZWN0KSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3dpdGNoTWFwT3BlcmF0b3I7XG59KCkpO1xudmFyIFN3aXRjaE1hcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3dpdGNoTWFwU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTd2l0Y2hNYXBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcm9qZWN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5uZXJTdWIocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH07XG4gICAgU3dpdGNoTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX2lubmVyU3ViID0gZnVuY3Rpb24gKHJlc3VsdCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHRoaXMuaW5uZXJTdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChpbm5lclN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaW5uZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbmV3IElubmVyU3Vic2NyaWJlcih0aGlzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGRlc3RpbmF0aW9uLmFkZChpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICB0aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgcmVzdWx0LCB2YWx1ZSwgaW5kZXgsIGlubmVyU3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmlwdGlvbiA9IHRoaXMuaW5uZXJTdWJzY3JpcHRpb247XG4gICAgICAgIGlmICghaW5uZXJTdWJzY3JpcHRpb24gfHwgaW5uZXJTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN3aXRjaE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbm5lclN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uIChpbm5lclN1Yikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5yZW1vdmUoaW5uZXJTdWIpO1xuICAgICAgICB0aGlzLmlubmVyU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTd2l0Y2hNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBTd2l0Y2hNYXBTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaE1hcC5qcy5tYXBcbiIsImV4cG9ydCBjbGFzcyBQaXRhbmplXG57XG4gICAgY29uc3RydWN0b3IodGV4dCxhdXRvcixrYXRlZHJhLHByZWRtZXQsaWQpXG4gICAge1xuICAgICAgICB0aGlzLm9kZ292b3JpPVtdO1xuICAgICAgICB0aGlzLnRleHQ9dGV4dDtcbiAgICAgICAgdGhpcy5hdXRvcj1hdXRvcjtcbiAgICAgICAgdGhpcy5rYXRlZHJhPWthdGVkcmE7XG4gICAgICAgIHRoaXMucHJlZG1ldD1wcmVkbWV0O1xuICAgICAgICB0aGlzLmlkPWlkO1xuICAgIH1cbiAgICBkb2Rhak9kZ292b3Iob2RnKVxuICAgIHtcbiAgICAgICAgdGhpcy5vZGdvdm9yaS5wdXNoKG9kZyk7XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBPZGdvdm9yXG57XG4gICAgY29uc3RydWN0b3IoYXV0b3Isc2Fkcnphaixwb2VuaSlcbiAgICB7XG4gICAgICAgIHRoaXMuYXV0b3JyPWF1dG9yO1xuICAgICAgICB0aGlzLnNhZHJ6YWo9c2FkcnphajtcbiAgICAgICAgdGhpcy5wb2VuaT1wb2VuaTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFVzZXJ7XG4gICAgY29uc3RydWN0b3IoaW1lLHNpZixvZGdvdm9yaSlcbiAgICB7XG4gICAgICAgIHRoaXMudXNlcm5hbWU9aW1lO1xuICAgICAgICB0aGlzLnBhc3N3b3JkPXNpZjtcbiAgICAgICAgdGhpcy5sYWprb3ZhbmlPZGc9b2Rnb3Zvcmk7XG4gICAgfVxuICAgIGRvZGFqTGFqa292YW5pT2RnKG9kZylcbiAgICB7XG4gICAgICAgIHRoaXMubGFqa292YW5pT2RnLnB1c2gob2RnKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgZnJvbUV2ZW50LCBmcm9tLCBmb3JrSm9pbiwgemlwLCBpbnRlcnZhbH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IGZpbHRlcixtYXAsZGlzdGluY3QsIHRha2VVbnRpbCAsIHNhbXBsZVRpbWUsIGRlYm91bmNlVGltZSwgc3dpdGNoTWFwLCBwYWlyd2lzZSwgc2Nhbix9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xuaW1wb3J0IHtQaXRhbmplfSBmcm9tIFwiLi9QaXRhbmplLmpzXCI7XG5pbXBvcnQge09kZ292b3J9IGZyb20gXCIuL09kZ292b3IuanNcIlxuaW1wb3J0e1VzZXJ9IGZyb20gXCIuL1VzZXIuanNcIjtcbmNvbnN0IHVybD1cImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMFwiO1xubGV0IGltZT1cIlwiO1xubGV0IGlkVXNlcj1cIlwiO1xubGV0IGxpc3RhUGl0YW5qYT1bXTtcbmxldCByaWk9dHJ1ZTtcbmxldCBlZW49dHJ1ZTtcbmxldCB1cHM9dHJ1ZTtcbmxldCBjb250cm9sU3RyZWFtPW5ldyBTdWJqZWN0KCk7XG5jb250cm9sU3RyZWFtLnN1YnNjcmliZSh4PT5jb25zb2xlLmxvZyh4KSk7XG5sZXQgcmlpU3RyZWFtO1xubGV0IGVlblN0cmVhbTtcbmxldCB1cHNTdHJlYW07XG5mdW5jdGlvbiBnZW5lcmlzaU5hc2xvdigpXG57XG4gICAgY29uc3QgbmFzbG92PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICBuYXNsb3YuaW5uZXJIVE1MPVwiZVBpdGFsaWNhP1wiO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobmFzbG92KTsgXG4gICAgaWYoaW1lIT1cIlwiKVxuICAgIHtcbiAgICAgICAgY29uc3Qgb3RhYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBsb2dvdXRCdXR0b249ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgbG9nb3V0QnV0dG9uLmlubmVySFRNTD1cIkxvZyBvdXRcIjtcbiAgICAgICAgbG9nb3V0QnV0dG9uLmNsYXNzTmFtZT1cIk9HTE9DXCI7XG4gICAgICAgIGxvZ291dEJ1dHRvbi5zdHlsZS5kaXNwbGF5PVwiaW5saW5lXCI7XG4gICAgICAgIGNvbnN0IG1vamFQaXRhbmphPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIG1vamFQaXRhbmphLmlubmVySFRNTD1cIk1vamEgUGl0YW5qYVwiO1xuICAgICAgICBtb2phUGl0YW5qYS5jbGFzc05hbWU9XCJPR0xPQ1wiO1xuICAgICAgICBjb25zdCBjbGVhckR1Z21lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgY2xlYXJEdWdtZS5pbm5lckhUTUw9XCJDbGVhclwiO1xuICAgICAgICBjbGVhckR1Z21lLmNsYXNzTmFtZT1cIk9HTE9DXCI7XG4gICAgICAgIGNsZWFyRHVnbWUub25jbGljaz0oKT0+e2xpc3RhUGl0YW5qYT1bXTsgbmFjcnRhalBpdGFuamEoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5waXRhbmphXCIpKTt9XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3RhYyk7XG4gICAgICAgIG90YWMuYXBwZW5kQ2hpbGQobG9nb3V0QnV0dG9uKTtcbiAgICAgICAgb3RhYy5hcHBlbmRDaGlsZChtb2phUGl0YW5qYSk7XG4gICAgICAgIG90YWMuYXBwZW5kQ2hpbGQoY2xlYXJEdWdtZSk7XG4gICAgICAgIGxvZ291dEJ1dHRvbi5vbmNsaWNrPSAoZXYpID0+IHsgICAgICAgXG4gICAgICAgICAgICBjb25zdCBwb2RhY2k9eyAgICAgIFxuICAgICAgICAgICAgICAgIG1ldGhvZDpcInB1dFwiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShpbWUpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZnJvbShcbiAgICAgICAgICAgICAgICBmZXRjaCh1cmwrXCIvdXNlcnMvXCIraWRVc2VyLHBvZGFjaSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgICAgICApLnN1YnNjcmliZSh1c2VyPT57IGNvbnNvbGUubG9nKHVzZXIpfSk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTD1cIlwiO1xuICAgICAgICAgICAgaW1lPVwiXCI7XG4gICAgICAgICAgICBnZW5lcmlzaU5hc2xvdigpO1xuICAgICAgICAgICAgZ2VuZXJpc2lMb2dpbigpO1xuICAgICAgICAgICAgZ2VuZXJpc2lTaWduVXAoKTtcbiAgICAgICAgfVxuICAgICAgICBtb2phUGl0YW5qYS5vbmNsaWNrPSAoZXYpPT57XG4gICAgICAgICAgICBsaXN0YVBpdGFuamE9W107XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBpdGFuamFcIikuaW5uZXJIVE1MPVwiXCI7XG4gICAgICAgICAgICBmcm9tKFxuICAgICAgICAgICAgICAgIGZldGNoKHVybCtcIi9waXRhbmphP2F1dG9yPVwiK2ltZS51c2VybmFtZSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgICAgICApLnN1YnNjcmliZSh1c2VyPT57IGRvZGFqUGl0YW5qYSh1c2VyLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGl0YW5qYVwiKSl9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdlbmVyaXNpTG9naW4oKXtcbiAgICBjb25zdCBvdGFjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgb3RhYy5jbGFzc05hbWU9XCJpbml0XCI7XG4gICAgY29uc3QgcGFyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIHBhci5pbm5lckhUTUw9XCJEb2Jyb2Rvc2xpIG5hemFkLCBVbG9ndWp0ZSBzZSAuLi5cIjtcbiAgICBjb25zdCB1c2VyTmFtZURvbT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgdXNlck5hbWVEb20ubmFtZT1cInVzZXJcIjtcbiAgICBjb25zdCBwYXNzd29yZERvbT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgcGFzc3dvcmREb20ubmFtZT1cInBhc3NcIjtcbiAgICBwYXNzd29yZERvbS50eXBlPVwicGFzc3dvcmRcIjtcbiAgICBjb25zdCBkaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQocGFyKTtcbiAgICBsZXQgbGFiZWxhMT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgbGFiZWxhMS5pbm5lckhUTUw9XCJVc2VybmFtZVwiO1xuICAgIGxldCBsYWJlbGEyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICBsYWJlbGEyLmlubmVySFRNTD1cIlBhc3N3b3JkXCI7XG4gICAgbGV0IGRpdjE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBsZXQgZGl2Mj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRpdjEuYXBwZW5kQ2hpbGQobGFiZWxhMSk7XG4gICAgZGl2MS5hcHBlbmRDaGlsZCh1c2VyTmFtZURvbSk7XG4gICAgZGl2Mi5hcHBlbmRDaGlsZChsYWJlbGEyKTtcbiAgICBkaXYyLmFwcGVuZENoaWxkKHBhc3N3b3JkRG9tKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoZGl2MSk7XG4gICAgZGl2LmFwcGVuZENoaWxkKGRpdjIpO1xuICAgIG90YWMuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG90YWMpO1xuICAgIGNvbnN0IGxvZ2luS29tZW50YXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFydGljbGVcIik7XG4gICAgZGl2LmFwcGVuZENoaWxkKGxvZ2luS29tZW50YXIpO1xuICAgIGNvbnN0IGR1Z21lPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgZHVnbWUuaW5uZXJIVE1MPVwiTG9naW5cIjtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoZHVnbWUpO1xuICAgIGR1Z21lLm9uY2xpY2s9KGV2KT0+e1xuICAgICAgICBsb2dpbigpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdlbmVyaXNpU2lnblVwKClcbntcbiAgICBsZXQgb3RhYz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmluaXRcIik7XG4gICAgY29uc3QgcGFyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIHBhci5pbm5lckhUTUw9XCJOZW1hdGUgTmFsb2csIG5hcHJhdml0ZSBnYSBcIjtcbiAgICBjb25zdCB1c2VyTmFtZURvbT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgdXNlck5hbWVEb20ubmFtZT1cInVzZXIxXCI7XG4gICAgY29uc3QgcGFzc3dvcmREb209ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIHBhc3N3b3JkRG9tLm5hbWU9XCJwYXNzMVwiO1xuICAgIHBhc3N3b3JkRG9tLnR5cGU9XCJwYXNzd29yZFwiO1xuICAgIGNvbnN0IGRpdj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRpdi5hcHBlbmRDaGlsZChwYXIpO1xuICAgIGxldCBsYWJlbGExPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICBsYWJlbGExLmlubmVySFRNTD1cIlVzZXJuYW1lXCI7XG4gICAgbGV0IGxhYmVsYTI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIGxhYmVsYTIuaW5uZXJIVE1MPVwiUGFzc3dvcmRcIjtcbiAgICBsZXQgZGl2MT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGxldCBkaXYyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZGl2MS5hcHBlbmRDaGlsZChsYWJlbGExKTtcbiAgICBkaXYxLmFwcGVuZENoaWxkKHVzZXJOYW1lRG9tKTtcbiAgICBkaXYyLmFwcGVuZENoaWxkKGxhYmVsYTIpO1xuICAgIGRpdjIuYXBwZW5kQ2hpbGQocGFzc3dvcmREb20pO1xuICAgIGRpdi5hcHBlbmRDaGlsZChkaXYxKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoZGl2Mik7XG4gICAgb3RhYy5hcHBlbmRDaGlsZChkaXYpO1xuICAgIGNvbnN0IGxvZ2luS29tZW50YXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFydGljbGVcIik7XG4gICAgZGl2LmFwcGVuZENoaWxkKGxvZ2luS29tZW50YXIpO1xuICAgIGRvZGFqS29udHJvbHUocGFzc3dvcmREb20sdXNlck5hbWVEb20sbG9naW5Lb21lbnRhcik7XG4gICAgY29uc3QgZHVnbWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBkdWdtZS5pbm5lckhUTUw9XCJTaWduIFVwXCI7XG4gICAgZGl2LmFwcGVuZENoaWxkKGR1Z21lKTtcbiAgICBkdWdtZS5vbmNsaWNrPShldik9PntcbiAgICAgICAgc2lnblVwKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZG9kYWpLb250cm9sdShpbnB1dCxpbnB1dDIsbGFiZWxhKVxue1xuICAgIGZyb21FdmVudChpbnB1dCxcImlucHV0XCIpLnBpcGUoXG4gICAgICAgIGRlYm91bmNlVGltZSg1MDApLC8vZGEgc2FjZWthIDUwMCBtc1xuICAgICAgICBtYXAoZXYgPT4gZXYudGFyZ2V0LnZhbHVlLnRyaW0oKSlcbiAgICApLnN1YnNjcmliZSh2YWw9PntyZWZyZXNoTGFiZWwodmFsLGxhYmVsYSxcIiBwYXNzd29yZCFcIil9KTtcblxuICAgIGZyb21FdmVudChpbnB1dDIsXCJpbnB1dFwiKS5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUoNTAwKSwvL2RhIHNhY2VrYSA1MDAgbXNcbiAgICAgICAgbWFwKGV2ID0+IGV2LnRhcmdldC52YWx1ZS50cmltKCkpXG4gICAgKS5zdWJzY3JpYmUodmFsPT57cmVmcmVzaExhYmVsKHZhbCxsYWJlbGEsXCIgdXNlcm5hbWUhXCIpfSk7XG59XG5mdW5jdGlvbiByZWZyZXNoTGFiZWwodmFsLGxhYmVsYSxwb3J1a2EpXG57XG4gICAgaWYodmFsLmxlbmd0aDw0KVxuICAgICAgICBsYWJlbGEuaW5uZXJIVE1MPVwiTmVkb3ZvbGpubyBkdWdcIitwb3J1a2E7XG4gICAgZWxzZVxuICAgICAgICBsYWJlbGEuaW5uZXJIVE1MPVwiXCI7XG59XG5mdW5jdGlvbiBsb2dpbigpXG57XG4gICAgbGV0IHVzZXJuYW1lPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFtuYW1lPSd1c2VyJ11cIikudmFsdWU7XG4gICAgbGV0IHBhc3N3b3JkPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFtuYW1lPSdwYXNzJ11cIikudmFsdWU7XG4gICAgY29uc29sZS5sb2cocGFzc3dvcmQrXCIgXCIrdXNlcm5hbWUpO1xuICAgIGlmKHVzZXJuYW1lICYmIHBhc3N3b3JkKXtcbiAgICAgICAgZnJvbShcbiAgICAgICAgICAgIGZldGNoKHVybCtcIi91c2Vycz91c2VybmFtZT1cIit1c2VybmFtZStcIiZwYXNzd29yZD1cIitwYXNzd29yZClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSkpXG4gICAgICAgIC5zdWJzY3JpYmUodXNlcj0+e3ZpZGlVc2VyKHVzZXIpO2NvbnNvbGUubG9nKHVzZXIpO30pO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYXJ0aWNsZVwiKS5pbm5lckhUTUw9XCJOZXZhbGlkYW4gVW5vcyFcIjtcbiAgICAgICAgY29uc29sZS5sb2coXCJOZXZhbGlkYW4gVW5vcyFcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaWduVXAoKVxue1xuICAgIGxldCB1c2VybmFtZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbbmFtZT0ndXNlcjEnXVwiKS52YWx1ZTtcbiAgICBsZXQgcGFzc3dvcmQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0W25hbWU9J3Bhc3MxJ11cIikudmFsdWU7XG4gICAgY29uc29sZS5sb2cocGFzc3dvcmQrXCIgXCIrdXNlcm5hbWUpO1xuICAgIGlmKHVzZXJuYW1lLnRyaW0oKS5sZW5ndGg+PTQgJiYgcGFzc3dvcmQudHJpbSgpLmxlbmd0aD49NCl7XG4gICAgICAgZnJvbShcbiAgICAgICAgICAgIGZldGNoKHVybCtcIi91c2Vycz91c2VybmFtZT1cIit1c2VybmFtZStcIiZwYXNzd29yZD1cIitwYXNzd29yZClcbiAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKSlcbiAgICAgICAgICAgLnN1YnNjcmliZSh1c2VyPT57c2lnblVzZXIodXNlcik7Y29uc29sZS5sb2codXNlcil9KTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImFydGljbGVcIilbMV0uaW5uZXJIVE1MPVwiTmV2YWxpZGFuIFVub3MhXCI7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTmV2YWxpZGFuIFVub3MhXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNpZ25Vc2VyKHVzZXIpXG57XG4gICAgbGV0IGRvbT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYXJ0aWNsZVwiKVsxXTtcbiAgICBpZih1c2VyLmxlbmd0aD09MClcbiAgICB7Ly91cGlzIG5vdm9nIGFjY291bnRhXG4gICAgICAgIGxldCB1c2VybmFtZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbbmFtZT0ndXNlcjEnXVwiKS52YWx1ZTtcbiAgICAgICAgbGV0IHBhc3N3b3JkPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFtuYW1lPSdwYXNzMSddXCIpLnZhbHVlO1xuICAgICAgICBsZXQgbml6PVtdO1xuICAgICAgICBsZXQgbm92aVVzZXI9bmV3IFVzZXIodXNlcm5hbWUscGFzc3dvcmQsbml6KTtcbiAgICAgICAgaW1lPW5vdmlVc2VyO1xuICAgICAgICBjb25zdCBwb2RhY2k9eyAgICAgIFxuICAgICAgICAgICAgbWV0aG9kOlwicG9zdFwiLFxuICAgICAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoe1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG5vdmlVc2VyKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgZnJvbShcbiAgICAgICAgICAgIGZldGNoKHVybCtcIi91c2Vyc1wiLHBvZGFjaSlcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgKS5zdWJzY3JpYmUodXNlcj0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tLmlubmVySFRNTD1cIlVzcGVzbm8gc3R2b3JlbiBub3ZpIGFjY291bnQhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBuYXB1bmlTaWduSW5JZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9rcmVuaSh1c2VyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBkb20uaW5uZXJIVE1MPVwiVXNlcm5hbWUvUGFzc3dvcmQga29tYmluYWNpamEgamUgemF1emV0YSFcIjtcbn1cbmZ1bmN0aW9uIG5hcHVuaVNpZ25JbklkKClcbntcbiAgICBmcm9tKFxuICAgICAgICBmZXRjaCh1cmwrXCIvdXNlcnM/dXNlcm5hbWU9XCIraW1lLnVzZXJuYW1lKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgKS5zdWJzY3JpYmUodXNlcj0+e2lkVXNlcj11c2VyWzBdW1wiaWRcIl07Y29uc29sZS5sb2coXCJVVkFDRU4gSUQgSkUgXCIraWRVc2VyKX0pO1xufVxuZnVuY3Rpb24gdmlkaVVzZXIodXNlcilcbntcbiAgICBsZXQgZG9tPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJhcnRpY2xlXCIpO1xuICAgIGlmKHVzZXIubGVuZ3RoPT0wKVxuICAgICAgICBkb20uaW5uZXJIVE1MPVwiUG9nZXJzYW4gVXNlcm5hbWUvUGFzc3dvcmQhXCI7XG4gICAgZWxzZSB7XG4gICAgICAgIGRvbS5pbm5lckhUTUw9XCJVc3Blc2FuIExvZ2luLCBTYWNla2FqdGUuLi4uXCI7XG4gICAgICAgIGltZT1uZXcgVXNlcih1c2VyWzBdW1widXNlcm5hbWVcIl0sdXNlclswXVtcInBhc3N3b3JkXCJdLHVzZXJbMF1bXCJsYWprb3ZhbmlPZGdcIl0pO1xuICAgICAgICBpZFVzZXI9dXNlclswXVtcImlkXCJdO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlVTZXJuYW1lIGplIDpcIitpbWUudXNlcm5hbWUpO1xuICAgICAgICBwb2tyZW5pKHVzZXIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN0YXJ0KHVzZXIpXG57XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PlxuICAgIHtcbiAgICAgICAgc2V0VGltZW91dCgoKT0+IHJlc29sdmUodXNlciksMTUwMCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBwb2tyZW5pKClcbntcbiAgICBzdGFydCgpXG4gICAgLnRoZW4oKHVzZXIpPT51Y2l0YWoodXNlcikpXG4gICAgLmNhdGNoKChyZWFzb24pPT4gY29uc29sZS5sb2cocmVhc29uKSk7XG59XG5mdW5jdGlvbiB1Y2l0YWoodXNlcilcbntcbiAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTD1cIlwiO1xuICAgIGdlbmVyaXNpTmFzbG92KCk7XG4gICAgZ2VuZXJpc2lQcm9maWwodXNlcik7XG59XG5mdW5jdGlvbiBnZW5lcmlzaVByb2ZpbCgpXG57XG4gICAgY29uc3QgcHJvZmlsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIHByb2ZpbC5pbm5lckhUTUw9XCIqIERvYnJvZG9zbGkgXCIraW1lLnVzZXJuYW1lK1wiICohXCI7XG4gICAgcHJvZmlsLmNsYXNzTmFtZT1cInN0clwiO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocHJvZmlsKTtcbiAgICBjb25zdCBtYWluPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbWFpbi5jbGFzc05hbWU9XCJtYWluXCI7XG4gICAgY29uc3QgcGl0YW5qYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHBpdGFuamEuY2xhc3NOYW1lPVwicGl0YW5qYVwiO1xuICAgIGNvbnN0IGZvcm1hPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZm9ybWEuY2xhc3NOYW1lPVwiZm9ybWFcIjtcbiAgICBtYWluLmFwcGVuZENoaWxkKHBpdGFuamEpO1xuICAgIG1haW4uYXBwZW5kQ2hpbGQoZm9ybWEpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFpbik7XG4gICAgbmFwdW5pRm9ybXUoZm9ybWEpO1xufVxuZnVuY3Rpb24gbmFwdW5pRm9ybXUoZm9ybWEpXG57XG4gICAgbGV0IGRpdjE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBmb3JtYS5hcHBlbmRDaGlsZChkaXYxKTtcbiAgICBsZXQgbGFiZWxhMT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgbGFiZWxhMS5pbm5lckhUTUw9XCJQcmV0cmF6aXRlIHBpdGFuamEgcG8gbmF6aXZ1IHByZWRtZXRhIDogXCI7XG4gICAgZGl2MS5hcHBlbmRDaGlsZChsYWJlbGExKTtcbiAgICBjb25zdCBwcmV0cmFnYURvbT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgcHJldHJhZ2FEb20ubmFtZT1cInNlYXJjaFwiO1xuICAgIGRpdjEuYXBwZW5kQ2hpbGQocHJldHJhZ2FEb20pO1xuICAgIGNvbnN0IGJ1dD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJ1dC5pbm5lckhUTUw9XCJQcmV0cmF6aVwiO1xuICAgIGJ1dC5jbGFzc05hbWU9XCJzcmNcIjtcbiAgICBkaXYxLmFwcGVuZENoaWxkKGJ1dCk7XG4gICAgYnV0Lm9uY2xpY2s9IChldikgPT4ge1xuICAgICAgICBsaXN0YVBpdGFuamE9W107XG4gICAgICAgIHZyYXRpUGl0YW5qYVByZWRtZXQocHJldHJhZ2FEb20udmFsdWUudHJpbSgpKTtcbiAgICB9XG4gICAgbGV0IGRpdjI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBmb3JtYS5hcHBlbmRDaGlsZChkaXYyKTtcbiAgICBsZXQgbGFiZWxhMj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgbGFiZWxhMi5pbm5lckhUTUw9XCJQcmV0cmF6aXRlIHBpdGFuamEgcG8ga2xqdWNuaW0gcmVjaW1hIDogXCI7XG4gICAgZGl2Mi5hcHBlbmRDaGlsZChsYWJlbGEyKTtcbiAgICBjb25zdCBwcmV0cmFnYURvbTI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIHByZXRyYWdhRG9tMi5uYW1lPVwic2VhcmNoMlwiO1xuICAgIHByZXRyYWdhRG9tMi5zdHlsZS5kaXNwbGF5PVwiaW5saW5lXCI7XG4gICAgZGl2Mi5hcHBlbmRDaGlsZChwcmV0cmFnYURvbTIpO1xuICAgIGRvZGFqRXZlbnRlKHByZXRyYWdhRG9tMik7XG4gICAgZG9kYWpTdWJCdXR0b25lKGZvcm1hKTtcbiAgICBkb2RhalBvbGplWmFVbm9zKGZvcm1hKTtcbiAgICBkb2RhakVsZW1lbnRlUGl0YW5qYShmb3JtYSk7XG4gICAgZG9kYWpTdHJlYW0oZm9ybWEpO1xufVxuZnVuY3Rpb24gZG9kYWpTdHJlYW0oZm9ybWEpXG57XG4gICAgY29uc3QgbGluaWphPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoclwiKTtcbiAgICBmb3JtYS5hcHBlbmRDaGlsZChsaW5pamEpO1xuICAgIGxldCBrb250ZWpuZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBrb250ZWpuZXIuY2xhc3NOYW1lPVwia29udGVqXCI7XG4gICAgbGV0IHN0cmVhbU5hc2xvdj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBzdHJlYW1OYXNsb3YuaW5uZXJIVE1MPVwiKioqIFN0cmVhbSAqKipcIjtcbiAgICBzdHJlYW1OYXNsb3YuY2xhc3NOYW1lPVwic3RyXCI7ICBcbiAgICBjb25zdCBjbGVhckR1Z21lPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgY2xlYXJEdWdtZS5pbm5lckhUTUw9XCJPY2lzdGlcIjtcbiAgICBjbGVhckR1Z21lLmNsYXNzTmFtZT1cImNscnJcIjtcbiAgICBjbGVhckR1Z21lLnN0eWxlLmRpc3BsYXk9XCJpbmxpbmVcIjtcbiAgICBjbGVhckR1Z21lLm9uY2xpY2s9KGV2KT0+e1xuICAgICAgICBsaXN0YVBpdGFuamE9W107XG4gICAgICAgIGxldCBkb2s9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3RyZWFtXCIpO1xuICAgICAgICBkb2suaW5uZXJIVE1MPVwiXCI7XG4gICAgfVxuICAgIGtvbnRlam5lci5hcHBlbmRDaGlsZChzdHJlYW1OYXNsb3YpO1xuICAgIGtvbnRlam5lci5hcHBlbmRDaGlsZChjbGVhckR1Z21lKTsgIFxuICAgIGZvcm1hLmFwcGVuZENoaWxkKGtvbnRlam5lcik7XG4gICAgY29uc3QgZGl2U3RyZWFtPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZGl2U3RyZWFtLmNsYXNzTmFtZT1cInN0cmVhbVwiO1xuICAgIGZvcm1hLmFwcGVuZENoaWxkKHN0cmVhbU5hc2xvdik7XG4gICAgZm9ybWEuYXBwZW5kQ2hpbGQoZGl2U3RyZWFtKTtcbn1cbmZ1bmN0aW9uIGRvZGFqRXZlbnRlKGlucDIpXG57XG4gICAgZnJvbUV2ZW50KGlucDIsXCJpbnB1dFwiKS5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUoNTAwKSwvL2RhIHNhY2VrYSA1MDAgbXNcbiAgICAgICAgbWFwKGV2ID0+IGV2LnRhcmdldC52YWx1ZS50cmltKCkpLFxuICAgICAgICBmaWx0ZXIodGV4dD0+IHRleHQubGVuZ3RoID49NClcbiAgICApLnN1YnNjcmliZSh2YWw9PntsaXN0YVBpdGFuamE9W107dnJhdGlQaXRhbmphU2Fkcnphaih2YWwpfSk7XG59XG5mdW5jdGlvbiB2cmF0aVBpdGFuamFTYWRyemFqKHZhbClcbntcbiAgICBjb25zdCBkaXY9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5waXRhbmphXCIpO1xuICAgIGNvbnN0IGlucD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbbmFtZT0nc2VhcmNoJ11cIik7XG4gICAgbGV0IHM9aW5wLnZhbHVlLnRyaW0oKTtcbiAgICBpZihzPT1cIlwiKSB7XG4gICAgICAgIGRpdi5pbm5lckhUTUw9XCJcIjtcbiAgICAgICAgZmV0Y2godXJsK1wiL3BpdGFuamE/cT1cIit2YWwpXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgLnRoZW4obW92aWVzPT5kb2RhalBpdGFuamEobW92aWVzLGRpdikpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGl2LmlubmVySFRNTD1cIlwiO1xuICAgICAgICBmZXRjaCh1cmwrXCIvcGl0YW5qYT9wcmVkbWV0PVwiKyBzK1wiJnE9XCIrdmFsKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgIC50aGVuKG1vdmllcz0+ZG9kYWpQaXRhbmphKG1vdmllcyxkaXYpKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2cmF0aVBpdGFuamFQcmVkbWV0KHZhbClcbntcbiAgICBjb25zdCBkaXY9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5waXRhbmphXCIpO1xuICAgIGRpdi5pbm5lckhUTUw9XCJcIjtcbiAgICBmZXRjaCh1cmwrXCIvcGl0YW5qYT9wcmVkbWV0PVwiK3ZhbClcbiAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgLnRoZW4obW92aWVzPT5kb2RhalBpdGFuamEobW92aWVzLGRpdikpO1xufVxuZnVuY3Rpb24gZG9kYWpQaXRhbmphKHBpdGFuamEsaG9zdClcbntcbiAgICBwaXRhbmphLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIGxldCBwaXRhbmplPW5ldyBQaXRhbmplKGVsZW1lbnRbXCJ0ZXh0XCJdLGVsZW1lbnRbXCJhdXRvclwiXSxlbGVtZW50W1wia2F0ZWRyYVwiXSxlbGVtZW50W1wicHJlZG1ldFwiXSxlbGVtZW50W1wiaWRcIl0pO1xuICAgICAgICBsZXQgb2RnPWVsZW1lbnRbXCJvZGdvdm9yaVwiXTtcbiAgICAgICAgb2RnLmZvckVhY2goZWw9PntcbiAgICAgICAgICAgIGxldCBvZGdvdm9yPW5ldyBPZGdvdm9yKGVsW1wiYXV0b3JyXCJdLGVsW1wic2FkcnphalwiXSxlbFtcInBvZW5pXCJdKTtcbiAgICAgICAgICAgIHBpdGFuamUuZG9kYWpPZGdvdm9yKG9kZ292b3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGlzdGFQaXRhbmphLnB1c2gocGl0YW5qZSk7XG59KTtcbmNvbnNvbGUubG9nKGxpc3RhUGl0YW5qYSk7XG5uYWNydGFqUGl0YW5qYShob3N0KTtcbn1cbmZ1bmN0aW9uIG5hY3J0YWpQaXRhbmphKGhvc3QpXG57XG4gICAgaG9zdC5pbm5lckhUTUw9XCJcIjtcbiAgICBsZXQgZmxhZztcbiAgICBsaXN0YVBpdGFuamEuZm9yRWFjaChwaXRhbmplPT57XG4gICAgICAgIGZsYWc9ZmFsc2U7XG4gICAgICAgIGxldCBkaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZGl2LmNsYXNzTmFtZT1cInF1ZXN0aW9uXCI7XG4gICAgICAgIGhvc3QuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgbGV0IGF1dG9yTGFiZWxhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgYXV0b3JMYWJlbGEuY2xhc3NOYW1lPVwiYXV0b3JcIjtcbiAgICAgICAgYXV0b3JMYWJlbGEuaW5uZXJIVE1MPVwiKkF1dG9yOiBcIitwaXRhbmplLmF1dG9yK1wiICpLYXRlZHJhIFwiK3BpdGFuamUua2F0ZWRyYSsgXCIgKlByZWRtZXQgXCIrcGl0YW5qZS5wcmVkbWV0K1wiICpCcm9qIE9kZ292b3JhIFwiK3BpdGFuamUub2Rnb3ZvcmkubGVuZ3RoK1wiKlwiO1xuICAgICAgICBsZXQgbGFiZWxhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgbGFiZWxhLmlubmVySFRNTD1waXRhbmplLnRleHQ7XG4gICAgICAgIGxhYmVsYS5jbGFzc05hbWU9XCJxdWVzdHh0XCI7XG4gICAgICAgIGxldCBkdWdtZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBkdWdtZS5pbm5lckhUTUw9XCJPZGdvdm9yaVwiO1xuICAgICAgICBkdWdtZS5pZD1waXRhbmplLmlkO1xuICAgICAgICBkdWdtZS5vbmNsaWNrID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBwcmlrYXppT2Rnb3ZvcmUoZXYudGFyZ2V0LmlkKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGVsZXRlQnV0dG9uO1xuICAgICAgICBpZihwaXRhbmplLmF1dG9yPT1pbWUudXNlcm5hbWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZsYWc9dHJ1ZTtcbiAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgZGVsZXRlQnV0dG9uLmlubmVySFRNTD1cIk9icmlzaVwiO1xuICAgICAgICAgICAgZGVsZXRlQnV0dG9uLnN0eWxlLmRpc3BsYXk9XCJpbmxpbmVcIjtcbiAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbi5pZD1waXRhbmplLmlkO1xuICAgICAgICAgICAgZGVsZXRlQnV0dG9uLm9uY2xpY2s9KGV2KT0+e1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2LnRhcmdldC5pZCk7XG4gICAgICAgICAgICAgICAgbGlzdGFQaXRhbmphLmZvckVhY2goKGVsZW1lbnQsaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC5pZD09ZXYudGFyZ2V0LmlkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RhUGl0YW5qYS5zcGxpY2UoaW5kZXgsMSk7XG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHBvZGFjaT17ICAgICAgXG4gICAgICAgICAgICAgICAgbWV0aG9kOlwiZGVsZXRlXCIsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoe1xuICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyb20oXG4gICAgICAgICAgICAgICAgZmV0Y2godXJsK1wiL3BpdGFuamEvXCIrZXYudGFyZ2V0LmlkLHBvZGFjaSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgICAgICApLnN1YnNjcmliZSh1c2VyPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5waXRhbmphXCIpLmlubmVySFRNTD1cIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hY3J0YWpQaXRhbmphKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGl0YW5qYVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChhdXRvckxhYmVsYSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbGEpO1xuICAgICAgICBpZihmbGFnPT10cnVlKVxuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKGRlbGV0ZUJ1dHRvbik7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChkdWdtZSk7XG4gICB9KTtcbn1cbmZ1bmN0aW9uIGRvYmF2aShpZClcbntcbiAgICBmcm9tKFxuICAgICAgICBmZXRjaCh1cmwrXCIvcGl0YW5qYS9cIitpZClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICkuc3Vic2NyaWJlKHBpdGFuamU9Pntjb25zb2xlLmxvZyhwaXRhbmplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocGl0YW5qZS5hdXRvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGFQaXRhbmphLnB1c2gocGl0YW5qZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hY3J0YWpQaXRhbmphKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3RyZWFtXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbn1cbmZ1bmN0aW9uIGRvZGFqU3ViQnV0dG9uZShmb3JtYSlcbntcbiAgICBjb25zdCBkaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCBkaXYxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29uc3Qgbm92b0R1Z21lID1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIG5vdm9EdWdtZS5pbm5lckhUTUw9XCJOb3ZhIFBpdGFuamFcIjtcbiAgICBub3ZvRHVnbWUuY2xhc3NOYW1lPVwic3ViYnV0dG9uXCI7XG4gICAgbm92b0R1Z21lLnN0eWxlLmRpc3BsYXk9XCJpbmxpbmVcIjtcbiAgICBub3ZvRHVnbWUub25jbGljaz0oZXYpPT57XG4gICAgICAgIG5ham5vdmlqYSgxKTtcbiAgICB9XG4gICAgY29uc3Qgc3ViQWxsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgc3ViQWxsLmlubmVySFRNTD1cIlN1YkFsbFwiO1xuICAgIHN1YkFsbC5jbGFzc05hbWU9XCJzdWJidXR0b25cIjtcbiAgICBzdWJBbGwuc3R5bGUuZGlzcGxheT1cImlubGluZVwiO1xuICAgIHN1YkFsbC5vbmNsaWNrPShldik9PntcbiAgICAgICAgbmFqbm92aWphKDIpO1xuICAgIH1cbiAgICBjb25zdCByZWRvbT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHJlZG9tLmlubmVySFRNTD1cIklzcG9jZXRrYVwiO1xuICAgIHJlZG9tLmNsYXNzTmFtZT1cInN1YmJ1dHRvblwiO1xuICAgIHJlZG9tLnN0eWxlLmRpc3BsYXk9XCJpbmxpbmVcIjtcbiAgICBpc3BvY2V0a2EocmVkb20pO1xuICAgIHJlZG9tLm9uY2xpY2s9KGV2KT0+e1xuICAgICAgICBsaXN0YVBpdGFuamE9W107XG4gICAgfVxuICAgIGNvbnN0IHBhcm92aUR1Z21lPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgcGFyb3ZpRHVnbWUuaW5uZXJIVE1MPVwiVSBwYXJ1XCI7XG4gICAgcGFyb3ZpRHVnbWUuY2xhc3NOYW1lPVwic3ViYnV0dG9uXCI7XG4gICAgcGFyb3ZpRHVnbWUuc3R5bGUuZGlzcGxheT1cImlubGluZVwiO1xuICAgIHBhcm92aUR1Z21lLm9uY2xpY2s9KGV2KT0+e1xuICAgICAgICBsZXQgYT1PYnNlcnZhYmxlLmNyZWF0ZShnZW5lcmF0b3I9PlxuICAgICAgICB7XG4gICAgICAgICAgIHNldEludGVydmFsKCAoKT0+IGdlbmVyYXRvci5uZXh0KHBhcnNlSW50KE1hdGgucmFuZG9tKCkqMTcrMSkpLDEwMDApO1xuICAgICAgICB9KVxuICAgICAgICBsZXQgamVkaW5zdHZlbmk9YS5waXBlKFxuICAgICAgICAgICAgZGlzdGluY3QoKSxcbiAgICAgICAgICAgIHBhaXJ3aXNlKCksXG4gICAgICAgICAgICB0YWtlVW50aWwoY29udHJvbFN0cmVhbSlcbiAgICAgICAgKVxuICAgICAgICBqZWRpbnN0dmVuaS5zdWJzY3JpYmUocGFyPT57Y29uc29sZS5sb2cocGFyKTt2cmF0aVBhclBpdGFuamEocGFyKX0pO1xuICAgIH1cbiAgICBkaXYxLmFwcGVuZENoaWxkKG5vdm9EdWdtZSk7XG4gICAgZGl2MS5hcHBlbmRDaGlsZChzdWJBbGwpO1xuICAgIGRpdjEuYXBwZW5kQ2hpbGQocmVkb20pO1xuICAgIGRpdjEuYXBwZW5kQ2hpbGQocGFyb3ZpRHVnbWUpO1xuICAgIGxldCBuaXo9W1wiUklJXCIsXCJFRU5cIixcIlVQU1wiXTtcbiAgICBuaXouZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgbGV0IGR1Z21lPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBkdWdtZS5pbm5lckhUTUw9XCJTdWIgXCIrZWxlbWVudDtcbiAgICAgICAgZHVnbWUuc3R5bGUuZGlzcGxheT1cImlubGluZVwiO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoZHVnbWUpO1xuICAgICAgICBkdWdtZS5pZD1lbGVtZW50O1xuICAgICAgICBkdWdtZS5jbGFzc05hbWU9XCJzdWJidXR0b25cIjtcbiAgICAgICAgZHVnbWUub25jbGljaz0oZXYpPT57XG4gICAgICAgIHJlc2lTdWJVbnN1Yihldi50YXJnZXQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgdW5zdWJCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHVuc3ViQnV0dG9uLmlubmVySFRNTD1cIlVuc3ViIEFsbFwiO1xuICAgIHVuc3ViQnV0dG9uLnN0eWxlLmRpc3BsYXk9XCJpbmxpbmVcIjtcbiAgICB1bnN1YkJ1dHRvbi5vbmNsaWNrPSAoZXYpPT57XG4gICAgICAgIGNvbnRyb2xTdHJlYW0ubmV4dCgyKTtcbiAgICAgICAgcmlpPXRydWU7XG4gICAgICAgIGVlbj10cnVlO1xuICAgICAgICB1cHM9dHJ1ZTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpPTA7aTwzO2krKyl7XG4gICAgICAgICAgICBsZXQgZHVnPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3ViYnV0dG9uXCIpW2ldO1xuICAgICAgICAgICAgZHVnLmlubmVySFRNTD1cIlN1YiBcIitkdWcuaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaXNwb2NldGthKHJlZG9tKTtcbiAgICB9XG4gICAgZGl2LmFwcGVuZENoaWxkKHVuc3ViQnV0dG9uKTtcbiAgICBmb3JtYS5hcHBlbmRDaGlsZChkaXYpO1xuICAgIGZvcm1hLmFwcGVuZENoaWxkKGRpdjEpO1xuICAgIGNvbnN0IGxpbmlqYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaHJcIik7XG4gICAgZm9ybWEuYXBwZW5kQ2hpbGQobGluaWphKTtcbn1cbmZ1bmN0aW9uIGlzcG9jZXRrYShkdWdtZSlcbntcbiAgICBjb25zdCBjbGlja3MgPSBmcm9tRXZlbnQoZHVnbWUsICdjbGljaycpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGNsaWNrcy5waXBlKHN3aXRjaE1hcCgoZXYpID0+IGludGVydmFsKDIwMDApKSx0YWtlVW50aWwoY29udHJvbFN0cmVhbSkpO1xuICAgIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiB7Y29uc29sZS5sb2coeCk7ZG9iYXZpKHgrMSl9KTtcbn1cbmZ1bmN0aW9uIHZyYXRpUGFyUGl0YW5qYShwYXIpXG57XG4gICAgY29uc3QgcHJ2b1BpdGFuamU9ZnJvbShcbiAgICAgICAgZmV0Y2godXJsK1wiL3BpdGFuamEvXCIrcGFyWzBdKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpKTtcbiAgICBwcnZvUGl0YW5qZS5zdWJzY3JpYmUocGl0YW5qZT0+Y29uc29sZS5sb2cocGl0YW5qZSkpO1xuICAgIGNvbnN0IGRydWdvUGl0YW5qZT1mcm9tKFxuICAgICAgICBmZXRjaCh1cmwrXCIvcGl0YW5qYS9cIitwYXJbMV0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSkpO1xuICAgIGRydWdvUGl0YW5qZS5zdWJzY3JpYmUocGl0YW5qZT0+Y29uc29sZS5sb2cocGl0YW5qZSkpO1xuICAgIGNvbnN0IGZvcmtqb2luID0gZm9ya0pvaW4oW1xuICAgICAgICBwcnZvUGl0YW5qZSxcbiAgICAgICAgZHJ1Z29QaXRhbmplXG4gICAgICAgIF0pO1xuICAgIGZvcmtqb2luLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IHZhbHVlID0+IHtsaXN0YVBpdGFuamE9dmFsdWU7bmFjcnRhalBpdGFuamEoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdHJlYW1cIikpfSxcbiAgICAgICAgY29tcGxldGU6ICgpID0+IGNvbnNvbGUubG9nKCdLcmFqIScpLFxuICAgIH0pO1xufVxuZnVuY3Rpb24gbmFqbm92aWphKGJyb2opXG57XG4gICAgY29uc3QgcmlpU3RyPWZyb20oXG4gICAgICAgIGZldGNoKHVybCtcIi9waXRhbmphP2thdGVkcmE9UklJXCIpXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICApLnN1YnNjcmliZShwaXRhbmphPT5zdHZvcmlPYnNlcnZhYmxlUGl0YW5qYShwaXRhbmphLFwiUklJXCIsYnJvaikpO1xuICAgY29uc3QgZWVuU3RyPSBmcm9tKFxuICAgICAgICBmZXRjaCh1cmwrXCIvcGl0YW5qYT9rYXRlZHJhPUVFTlwiKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgKS5zdWJzY3JpYmUocGl0YW5qYT0+c3R2b3JpT2JzZXJ2YWJsZVBpdGFuamEocGl0YW5qYSxcIkVFTlwiLGJyb2opKTsgXG4gICAgbGV0IHVwc1N0cj0gZnJvbShcbiAgICAgICAgZmV0Y2godXJsK1wiL3BpdGFuamE/a2F0ZWRyYT1VUFNcIilcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICkuc3Vic2NyaWJlKHBpdGFuamE9PnN0dm9yaU9ic2VydmFibGVQaXRhbmphKHBpdGFuamEsXCJVUFNcIixicm9qKSk7ICBcbn1cbmZ1bmN0aW9uIHN0dm9yaU9ic2VydmFibGVQaXRhbmphKHBpdGFuamEsa2F0ZWRyYSxicm9qKVxue1xuICAgIGlmKGthdGVkcmE9PVwiUklJXCIpXG4gICAge1xuICAgICAgICByaWlTdHJlYW09ZnJvbShwaXRhbmphKTtcbiAgICAgICAgcmlpU3RyZWFtLnN1YnNjcmliZSh4PT5jb25zb2xlLmxvZyh4KSk7XG4gICAgfVxuICAgIGVsc2UgaWYoa2F0ZWRyYT09XCJFRU5cIil7XG4gICAgICAgIGVlblN0cmVhbT1mcm9tKHBpdGFuamEpO1xuICAgICAgICBlZW5TdHJlYW0uc3Vic2NyaWJlKHg9PmNvbnNvbGUubG9nKHgpKTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgdXBzU3RyZWFtPWZyb20ocGl0YW5qYSk7XG4gICAgICAgIHVwc1N0cmVhbS5zdWJzY3JpYmUoeD0+Y29uc29sZS5sb2coeCkpO1xuICAgICAgICBpZihicm9qPT0xKVxuICAgICAgICAgICAgZm9ya0pvaW5TdHJlYW1vdmUoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgemlwdWpTdHJlYW1vdmUoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBmb3JrSm9pblN0cmVhbW92ZSgpXG57XG4gICAgY29uc3QgZm9ya2pvaW4gPSBmb3JrSm9pbihbXG4gICAgICAgIHJpaVN0cmVhbSxcbiAgICAgICAgZWVuU3RyZWFtLFxuICAgICAgICB1cHNTdHJlYW0sXG4gICAgICBdKTtcbiAgICAgIGZvcmtqb2luLnN1YnNjcmliZSh7XG4gICAgICAgbmV4dDogdmFsdWUgPT4ge2xpc3RhUGl0YW5qYT12YWx1ZTtuYWNydGFqUGl0YW5qYShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN0cmVhbVwiKSl9LFxuICAgICAgIGNvbXBsZXRlOiAoKSA9PiBjb25zb2xlLmxvZygnS3JhaiEnKSxcbiAgICAgIH0pO1xufVxuZnVuY3Rpb24gemlwdWpTdHJlYW1vdmUoKVxue1xuICAgIGxldCBvYnM9IGludGVydmFsKDI1MDApO1xuICAgIG9icy5zdWJzY3JpYmUoKTtcbiAgICB6aXAocmlpU3RyZWFtLCBlZW5TdHJlYW0sIHVwc1N0cmVhbSxvYnMpLnBpcGUoXG4gICAgICAgIG1hcCgoW3JpaSwgZWVuLCB1cHMsb2JzXSkgPT4gKFsgcmlpLCBlZW4sIHVwcyBdKSksXG4gICAgICAgIHRha2VVbnRpbChjb250cm9sU3RyZWFtKVxuICAgICkuc3Vic2NyaWJlKG5pek9kVHJpID0+IHtsaXN0YVBpdGFuamE9bml6T2RUcmk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hY3J0YWpQaXRhbmphKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3RyZWFtXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xufVxuZnVuY3Rpb24gcmVzaVN1YlVuc3ViKGR1Z21lKVxue1xuICAgIGlmKGR1Z21lLmlkPT1cIlJJSVwiKVxuICAgIHtcbiAgICAgICAgaWYocmlpPT10cnVlKVxuICAgICAgICB7XG4gICAgICAgICAgICBmcm9tKFxuICAgICAgICAgICAgICAgIGZldGNoKHVybCtcIi9waXRhbmphP2thdGVkcmE9UklJXCIpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgICAgICkuc3Vic2NyaWJlKHVzZXI9PntwcmlrYXppU3RyZWFtKHVzZXIsdXNlci5sZW5ndGgsXCJSSUlcIil9KTtcbiAgICAgICAgICAgIGR1Z21lLmlubmVySFRNTD1cIlVuc3ViIFJJSVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgcmlpU3RyZWFtLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICByaWlTdHJlYW09bnVsbDtcbiAgICAgICAgICAgIGR1Z21lLmlubmVySFRNTD1cIlN1YiBSSUlcIjtcbiAgICAgICAgfVxuICAgICAgICByaWk9IXJpaTtcbiAgICB9XG4gICAgZWxzZSBpZihkdWdtZS5pZD09XCJFRU5cIilcbiAgICB7XG4gICAgICAgIGlmKGVlbj09dHJ1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZHVnbWUuaW5uZXJIVE1MPVwiVW5zdWIgRUVOXCI7XG4gICAgICAgICAgICBmcm9tKFxuICAgICAgICAgICAgICAgIGZldGNoKHVybCtcIi9waXRhbmphP2thdGVkcmE9RUVOXCIpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgICAgICkuc3Vic2NyaWJlKHVzZXI9PntwcmlrYXppU3RyZWFtKHVzZXIsdXNlci5sZW5ndGgsXCJFRU5cIil9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGVlblN0cmVhbS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgZWVuU3RyZWFtPW51bGw7XG4gICAgICAgICAgICBkdWdtZS5pbm5lckhUTUw9XCJTdWIgRUVOXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWVuPSFlZW47XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIGlmKHVwcz09dHJ1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZnJvbShcbiAgICAgICAgICAgICAgICBmZXRjaCh1cmwrXCIvcGl0YW5qYT9rYXRlZHJhPVVQU1wiKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgICAgICApLnN1YnNjcmliZSh1c2VyPT57cHJpa2F6aVN0cmVhbSh1c2VyLHVzZXIubGVuZ3RoLFwiVVBTXCIpfSk7XG4gICAgICAgICAgICBkdWdtZS5pbm5lckhUTUw9XCJVbnN1YiBVUFNcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHVwc1N0cmVhbS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdXBzU3RyZWFtPW51bGw7XG4gICAgICAgICAgICBkdWdtZS5pbm5lckhUTUw9XCJTdWIgVVBTXCI7XG4gICAgICAgIH1cbiAgICB1cHM9IXVwcztcbiAgICB9XG59XG5mdW5jdGlvbiBkb2RhalBvbGplWmFVbm9zKGZvcm1hKVxue1xuICAgIGNvbnN0IHBhcj0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgcGFyLmlubmVySFRNTD1cIlVuZXNpdGUgc2FkcnphaiBWYXNlZyBwaXRhbmphIG92ZGU6XCJcbiAgICBmb3JtYS5hcHBlbmRDaGlsZChwYXIpO1xuICAgIGNvbnN0IHRleHRJbnB1dD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XG4gICAgdGV4dElucHV0Lm5hbWU9XCJzYWRyemFqXCI7XG4gICAgdGV4dElucHV0LnJvd3M9NjtcbiAgICB0ZXh0SW5wdXQuY29scz0yNTtcbiAgICBmb3JtYS5hcHBlbmRDaGlsZCh0ZXh0SW5wdXQpO1xufVxuZnVuY3Rpb24gZG9kYWpFbGVtZW50ZVBpdGFuamEoZm9ybWEpXG57XG4gICAgY29uc3Qgc2VsRGl2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbGV0IG5pej1bXCJSSUlcIixcIkVFTlwiLFwiVVBTXCJdO1xuICAgIGxldCBsYWI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIGxhYi5pbm5lckhUTUw9XCJTZWxla3R1anRlIEthdGVkcnUgemEgcGl0YW5qZSA6XCI7XG4gICAgc2VsRGl2LmFwcGVuZENoaWxkKGxhYik7XG4gICAgY29uc3Qgc2VsZWt0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgbml6LmZvckVhY2goZWxlbWVudD0+e1xuICAgICAgICBsZXQgb3BjaWphPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgIG9wY2lqYS5pbm5lckhUTUw9ZWxlbWVudDtcbiAgICAgICAgb3BjaWphLnZhbHVlPWVsZW1lbnQ7XG4gICAgICAgIHNlbGVrdC5hcHBlbmRDaGlsZChvcGNpamEpO1xuICAgIH0pO1xuICAgIHNlbERpdi5hcHBlbmRDaGlsZChzZWxla3QpO1xuICAgIGZvcm1hLmFwcGVuZENoaWxkKHNlbERpdik7XG4gICAgY29uc3QgZGl2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZm9ybWEuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICBjb25zdCBsYWJlbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgbGFiZWwuaW5uZXJIVE1MPVwiVW5lc2l0ZSBuYXppdiBQcmVkbWV0YSA6XCI7XG4gICAgY29uc3QgbmF6aXZQcmVkbWV0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBuYXppdlByZWRtZXRhLm5hbWU9XCJpbWVQcmVkbWV0YVwiO1xuICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgZGl2LmFwcGVuZENoaWxkKG5heml2UHJlZG1ldGEpO1xuICAgIGZvcm1hLmFwcGVuZENoaWxkKGRpdik7XG4gICAgY29uc3QgZHVnbWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBkdWdtZS5pbm5lckhUTUw9XCJEb2RhalwiO1xuICAgIGR1Z21lLnN0eWxlLm1hcmdpbkxlZnQ9XCI3NSVcIjtcbiAgICBmb3JtYS5hcHBlbmRDaGlsZChkdWdtZSk7XG4gICAgZHVnbWUub25jbGljaz0oZXYpPT57XG4gICAgICAgIHByb3NsZWRpUGl0YW5qZShmb3JtYSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcHJvc2xlZGlQaXRhbmplKGZvcm1hKVxue1xuICAgIGxldCBrYXRlZHJhPWZvcm1hLnF1ZXJ5U2VsZWN0b3IoXCJzZWxlY3RcIikudmFsdWU7XG4gICAgbGV0IHRleHQ9Zm9ybWEucXVlcnlTZWxlY3RvcihcInRleHRhcmVhXCIpLnZhbHVlO1xuICAgIGxldCBuYXppdlByZWRtZXRhPWZvcm1hLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFtuYW1lPSdpbWVQcmVkbWV0YSddXCIpLnZhbHVlO1xuICAgIGlmKCF0ZXh0IHx8ICFuYXppdlByZWRtZXRhKVxuICAgICAgICByZXR1cm4gO1xuICAgIGNvbnNvbGUubG9nKGthdGVkcmErIFwiIFwiK3RleHQrXCIgXCIrbmF6aXZQcmVkbWV0YSk7XG4gICAgbGV0IG5vdm9QaXRhbmplPW5ldyBQaXRhbmplKHRleHQsaW1lLnVzZXJuYW1lLGthdGVkcmEsbmF6aXZQcmVkbWV0YSk7XG4gICAgbGV0IG9kZz1bXTtcbiAgICBjb25zdCBwYXlsb2FkPXtcbiAgICAgICAgYXV0b3I6aW1lLnVzZXJuYW1lLFxuICAgICAgICBwcmVkbWV0Om5heml2UHJlZG1ldGEsXG4gICAgICAgIGthdGVkcmE6a2F0ZWRyYSxcbiAgICAgICAgdGV4dDp0ZXh0LFxuICAgICAgICBvZGdvdm9yaTpvZGdcbiAgICB9XG4gICAgY29uc3QgcG9kYWNpPXsgICAgICBcbiAgICAgICAgbWV0aG9kOlwicG9zdFwiLFxuICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIH0pLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXG4gICAgfTtcbiAgICBmcm9tKFxuICAgICAgICBmZXRjaCh1cmwrXCIvcGl0YW5qYVwiLHBvZGFjaSlcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICApLnN1YnNjcmliZSh1c2VyPT57Y29uc29sZS5sb2codXNlcik7bGlzdGFQaXRhbmphPVtdO3ZyYXRpUGl0YW5qYVByZWRtZXQobm92b1BpdGFuamUucHJlZG1ldCl9KTtcbn1cbmZ1bmN0aW9uIHByaWthemlPZGdvdm9yZShpZClcbntcbiAgICBjb25zb2xlLmxvZyhpZCk7XG4gICAgZnJvbShsaXN0YVBpdGFuamEpLnBpcGUoXG4gICAgICAgIGZpbHRlcihlbD0+ZWwuaWQ9PWlkKVxuICAgICAgICApLnN1YnNjcmliZShwaXRhbmplPT5vZHN0YW1wYWpQaXRhbmplSU9kZ292b3JlKHBpdGFuamUpKVxufVxuZnVuY3Rpb24gb2RzdGFtcGFqUGl0YW5qZUlPZGdvdm9yZShwaXRhbmplKVxue1xuICAgIGxldCBmbGFnPXRydWU7XG4gICAgY29uc29sZS5sb2cocGl0YW5qZSk7XG4gICAgbGV0IGtvbj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBpdGFuamFcIik7XG4gICAga29uLmlubmVySFRNTD1cIlwiO1xuICAgIGxldCBkaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkaXYuY2xhc3NOYW1lPVwicXVlc3Rpb25cIjtcbiAgICBrb24uYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICBsZXQgYXV0b3JMYWJlbGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIGF1dG9yTGFiZWxhLmNsYXNzTmFtZT1cImF1dG9yXCI7XG4gICAgYXV0b3JMYWJlbGEuaW5uZXJIVE1MPVwiKkF1dG9yOiBcIitwaXRhbmplLmF1dG9yK1wiICpLYXRlZHJhIFwiK3BpdGFuamUua2F0ZWRyYSsgXCIgKlByZWRtZXQgXCIrcGl0YW5qZS5wcmVkbWV0K1wiICpCcm9qIE9kZ292b3JhIFwiK3BpdGFuamUub2Rnb3ZvcmkubGVuZ3RoK1wiICpcIjtcbiAgICBsZXQgbGFiZWxhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICBsYWJlbGEuaW5uZXJIVE1MPXBpdGFuamUudGV4dDtcbiAgICBsYWJlbGEuY2xhc3NOYW1lPVwicXVlc3R4dFwiO1xuICAgIGRpdi5hcHBlbmRDaGlsZChhdXRvckxhYmVsYSk7XG4gICAgZGl2LmFwcGVuZENoaWxkKGxhYmVsYSk7XG4gICAgY29uc3Qgb3RhY09kZ292b3JpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgb3RhY09kZ292b3JpLmNsYXNzTmFtZT1cIkxJRk9cIjtcbiAgICBwaXRhbmplLm9kZ292b3JpLmZvckVhY2goKGVsZW1lbnQsaW5kZXgpID0+IHtcbiAgICAgICAgZmxhZz10cnVlO1xuICAgICAgICBsZXQgb2RnRGl2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG9kZ0Rpdi5jbGFzc05hbWU9XCJxdWVzdGlvblwiO1xuICAgICAgICBsZXQgaGVhZGVyT2RnPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgaGVhZGVyT2RnLmlubmVySFRNTD1cIipPZGdvdm9yIDogQXV0b3IgXCIrZWxlbWVudC5hdXRvcnIrXCIgKlJlanRpbmcgXCIrZWxlbWVudC5wb2VuaStcIipcIjtcbiAgICAgICAgaGVhZGVyT2RnLmNsYXNzTmFtZT1cImF1dG9yXCI7XG4gICAgICAgIG9kZ0Rpdi5hcHBlbmRDaGlsZChoZWFkZXJPZGcpO1xuICAgICAgICBsZXQgYm9keU9kZz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIGJvZHlPZGcuY2xhc3NOYW1lPVwicXVlc3R4dFwiXG4gICAgICAgIGJvZHlPZGcuaW5uZXJIVE1MPWVsZW1lbnQuc2FkcnphajtcbiAgICAgICAgaW1lLmxhamtvdmFuaU9kZy5mb3JFYWNoKGVsPT57XG4gICAgICAgICAgICAgICAgaWYoZWw9PWVsZW1lbnQuc2FkcnphailcbiAgICAgICAgICAgICAgICAgICAgZmxhZz1mYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB1cHZvdGVCdXR0b247XG4gICAgICAgIGlmKGZsYWc9PXRydWUpe1xuICAgICAgICAgICAgdXB2b3RlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgICAgIHVwdm90ZUJ1dHRvbi5pbm5lckhUTUw9XCJVcHZvdGVcIjtcbiAgICAgICAgICAgIHVwdm90ZUJ1dHRvbi5pZD1pbmRleDtcbiAgICAgICAgICAgIHVwdm90ZUJ1dHRvbi5vbmNsaWNrPShldik9PntcbiAgICAgICAgICAgICAgICBwaXRhbmplLm9kZ292b3JpW2V2LnRhcmdldC5pZF0ucG9lbmkrKztcbiAgICAgICAgICAgICAgICBpbWUubGFqa292YW5pT2RnLnB1c2gocGl0YW5qZS5vZGdvdm9yaVtldi50YXJnZXQuaWRdLnNhZHJ6YWopO1xuICAgICAgICAgICAgICAgIHBvc2FsamlLb21lbnRhcihwaXRhbmplLDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9kZ0Rpdi5hcHBlbmRDaGlsZChib2R5T2RnKTtcbiAgICAgICAgaWYoZmxhZz09dHJ1ZSAmJiB1cHZvdGVCdXR0b24pXG4gICAgICAgIG9kZ0Rpdi5hcHBlbmRDaGlsZCh1cHZvdGVCdXR0b24pO1xuICAgICAgICBvdGFjT2Rnb3ZvcmkuYXBwZW5kQ2hpbGQob2RnRGl2KTtcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKG90YWNPZGdvdm9yaSk7XG4gICAgfSk7XG4gICAgY29uc3QgbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBsLmlubmVySFRNTD1cIkRvZGFqdGUgVmFzIE9kZ292b3IgLi4uXCI7XG4gICAga29uLmFwcGVuZENoaWxkKGwpO1xuICAgIGNvbnN0IG9kZ292b3JBcmVhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgICBvZGdvdm9yQXJlYS5yb3dzPTU7XG4gICAga29uLmFwcGVuZENoaWxkKG9kZ292b3JBcmVhKTtcbiAgICBjb25zdCBkaXZCdXR0b249ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCBkYWpPZGdvdm9yPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgZGFqT2Rnb3Zvci5pbm5lckhUTUw9XCJEYWogT2Rnb3ZvclwiO1xuICAgIGRhak9kZ292b3Iuc3R5bGUuZGlzcGxheT1cImlubGluZVwiO1xuICAgIGRhak9kZ292b3Iub25jbGljaz0oZXYpPT57XG4gICAgICAgIGNvbnNvbGUubG9nKHBpdGFuamUpO1xuICAgICAgICBwb3NhbGppS29tZW50YXIocGl0YW5qZSk7XG4gICAgfVxuICAgIGRpdkJ1dHRvbi5hcHBlbmRDaGlsZChkYWpPZGdvdm9yKTtcbiAgICBjb25zdCBkdWdtZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGR1Z21lLmlubmVySFRNTD1cIk5hemFkXCI7XG4gICAgZGl2QnV0dG9uLmFwcGVuZENoaWxkKGR1Z21lKTtcbiAgICBkdWdtZS5vbmNsaWNrPShldik9PntcbiAgICAgICAgbmFjcnRhalBpdGFuamEoa29uKTsgIFxuICAgIH1cbiAgICBrb24uYXBwZW5kQ2hpbGQoZGl2QnV0dG9uKTtcbn1cbmZ1bmN0aW9uIHBvc2FsamlLb21lbnRhcihwaXRhbmplLGxhamspXG57XG4gICAgY29uc29sZS5sb2cocGl0YW5qZSk7XG4gICAgbGV0IHNhZHJ6YWo9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5waXRhbmphXCIpLnF1ZXJ5U2VsZWN0b3IoXCJ0ZXh0YXJlYVwiKS52YWx1ZTtcbiAgICBpZihzYWRyemFqLnRyaW0oKT09XCJcIiAmJiAhbGFqaylcbiAgICAgICAgcmV0cnVuO1xuICAgIGlmKCFsYWprKXtcbiAgICAgICAgbGV0IG5vdmlPZGdvdm9yPW5ldyBPZGdvdm9yKGltZS51c2VybmFtZSxzYWRyemFqLDApO1xuICAgICAgICBwaXRhbmplLm9kZ292b3JpLnB1c2gobm92aU9kZ292b3IpO1xuICAgIH1cbiAgICBjb25zdCBwb2RhY2k9eyAgICAgIFxuICAgICAgICBtZXRob2Q6XCJwdXRcIixcbiAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoe1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCBcbiAgICB9KSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwaXRhbmplKVxuICAgIH07XG4gICAgZnJvbShcbiAgICAgICAgZmV0Y2godXJsK1wiL3BpdGFuamEvXCIrcGl0YW5qZS5pZCxwb2RhY2kpXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICApLnN1YnNjcmliZShwaXRhbmplT2JqPT57IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGl0YW5qYVwiKS5pbm5lckhUTUw9XCJcIjtcbiAgICBvZHN0YW1wYWpQaXRhbmplSU9kZ292b3JlKHBpdGFuamVPYmopO30pO1xufVxuZnVuY3Rpb24gcHJpa2F6aVN0cmVhbShzdHJlYW0sZHV6LGthdGVkcmEpXG57XG4gICAgbGV0IG5pej1bXTtcbiAgICBzdHJlYW0uZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgbml6LnB1c2goZWxlbWVudCk7XG4gICAgfSk7XG4gICAgbGV0IGE9T2JzZXJ2YWJsZS5jcmVhdGUoZ2VuZXJhdG9yPT5cbiAgICAgICAge1xuICAgICAgICAgICBzZXRJbnRlcnZhbCggKCk9PiBnZW5lcmF0b3IubmV4dChwYXJzZUludChNYXRoLnJhbmRvbSgpKmR1eikpLDIwMDApO1xuICAgICAgICB9KSAgIFxuICAgIGxldCB0b2s9YS5waXBlKFxuICAgICAgICB0YWtlVW50aWwoY29udHJvbFN0cmVhbSksXG4gICAgICAgIGRpc3RpbmN0KClcbiAgICApLnN1YnNjcmliZSh4PT57bGlzdGFQaXRhbmphLnB1c2goc3RyZWFtW3hdKTtuYWNydGFqUGl0YW5qYShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN0cmVhbVwiKSl9KTtcbiAgICBpZihrYXRlZHJhPT1cIlJJSVwiKVxuICAgICAgICByaWlTdHJlYW09dG9rXG4gICAgZWxzZSBpZihrYXRlZHJhPT1cIkVFTlwiKVxuICAgICAgICBlZW5TdHJlYW09dG9rO1xuICAgIGVsc2UgaWYoa2F0ZWRyYT09XCJVUFNcIilcbiAgICAgICAgdXBzU3RyZWFtPXRvaztcbn1cbmdlbmVyaXNpTmFzbG92KCk7XG5nZW5lcmlzaUxvZ2luKCk7XG5nZW5lcmlzaVNpZ25VcCgpOyJdLCJzb3VyY2VSb290IjoiIn0=